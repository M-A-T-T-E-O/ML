{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d4134d7e-daf7-4b59-9c49-af573a0cbcac",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Please insert the size of input (Layer 0) : 1\n",
      "Please insert the size of output (Layer 0) : 4\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "A priori conditions:\n",
      "------------------------------\n",
      "The output from linear model is correct\n",
      "------------------------------\n",
      "The output from ReLU is correct\n",
      "------------------------------\n",
      "The output from convex combination is correct\n",
      "\n",
      "Model parameters:\n",
      "------------------------------\n",
      "The x (data):  tensor([0.0290])\n",
      "------------------------------\n",
      "The w (weight):  tensor([[-0.1962],\n",
      "        [-0.4803],\n",
      "        [-0.2667],\n",
      "        [-0.8834]])\n",
      "------------------------------\n",
      "The b (bias):  tensor([ 0.4013, -0.8964, -0.0637,  0.3476])\n",
      "\n",
      "First level output:\n",
      "------------------------------\n",
      "The y_1 (output from lin. model): tensor([ 0.3956, -0.9103, -0.0715,  0.3220])\n",
      "\n",
      "Second level output:\n",
      "------------------------------\n",
      "The y_2 (output from ReLU): tensor([0.3956, 0.0000, 0.0000, 0.3220])\n",
      "\n",
      "Third level output:\n",
      "------------------------------\n",
      "The y_3 (output from convex combination): tensor([0.2209, 0.3000, 0.3000, 0.2356])\n",
      "\n",
      "----------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "My Neural Network is: input -> Layer 0 ->  output\n",
      "\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Do you want to add a new Layer? (type y (yes) or n (no)?) y\n",
      "Please insert the size of input (Layer 1) : 4\n",
      "Please insert the size of output (Layer 1) : 1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "A priori conditions:\n",
      "------------------------------\n",
      "The output from linear model is correct\n",
      "------------------------------\n",
      "The output from ReLU is correct\n",
      "------------------------------\n",
      "The output from convex combination is correct\n",
      "\n",
      "Model parameters:\n",
      "------------------------------\n",
      "The x (data):  tensor([0.2209, 0.3000, 0.3000, 0.2356])\n",
      "------------------------------\n",
      "The w (weight):  tensor([[-0.1685,  0.2837,  0.0631,  0.2749]])\n",
      "------------------------------\n",
      "The b (bias):  tensor([0.3208])\n",
      "\n",
      "First level output:\n",
      "------------------------------\n",
      "The y_1 (output from lin. model): tensor([0.4524])\n",
      "\n",
      "Second level output:\n",
      "------------------------------\n",
      "The y_2 (output from ReLU): tensor([0.4524])\n",
      "\n",
      "Third level output:\n",
      "------------------------------\n",
      "The y_3 (output from convex combination): tensor([0.2095])\n",
      "\n",
      "----------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "My Neural Network is: input -> Layer 0 -> Layer 1 ->  output\n",
      "\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Do you want to add a new Layer? (type y (yes) or n (no)?) n\n"
     ]
    }
   ],
   "source": [
    "run main.py"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "69c1958c-7de3-42eb-8a82-2232a1862c1c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The U is: tensor([[63.],\n",
      "        [42.],\n",
      "        [96.],\n",
      "        [48.],\n",
      "        [42.],\n",
      "        [82.],\n",
      "        [98.],\n",
      "        [32.],\n",
      "        [80.],\n",
      "        [24.],\n",
      "        [49.],\n",
      "        [32.],\n",
      "        [81.],\n",
      "        [19.],\n",
      "        [ 2.],\n",
      "        [62.],\n",
      "        [79.],\n",
      "        [34.],\n",
      "        [44.],\n",
      "        [27.],\n",
      "        [52.],\n",
      "        [65.],\n",
      "        [58.],\n",
      "        [ 6.],\n",
      "        [66.],\n",
      "        [67.],\n",
      "        [51.],\n",
      "        [15.],\n",
      "        [32.],\n",
      "        [61.],\n",
      "        [47.],\n",
      "        [24.],\n",
      "        [43.],\n",
      "        [90.],\n",
      "        [27.],\n",
      "        [16.],\n",
      "        [ 9.],\n",
      "        [23.],\n",
      "        [83.],\n",
      "        [39.],\n",
      "        [70.],\n",
      "        [81.],\n",
      "        [82.],\n",
      "        [59.],\n",
      "        [27.],\n",
      "        [88.],\n",
      "        [ 6.],\n",
      "        [ 3.],\n",
      "        [74.],\n",
      "        [ 8.],\n",
      "        [ 5.],\n",
      "        [51.],\n",
      "        [ 5.],\n",
      "        [36.],\n",
      "        [24.],\n",
      "        [72.],\n",
      "        [69.],\n",
      "        [33.],\n",
      "        [45.],\n",
      "        [79.],\n",
      "        [97.],\n",
      "        [59.],\n",
      "        [89.],\n",
      "        [84.],\n",
      "        [29.],\n",
      "        [88.],\n",
      "        [37.],\n",
      "        [24.],\n",
      "        [85.],\n",
      "        [52.],\n",
      "        [68.],\n",
      "        [88.],\n",
      "        [58.],\n",
      "        [68.],\n",
      "        [74.],\n",
      "        [ 4.],\n",
      "        [22.],\n",
      "        [83.],\n",
      "        [39.],\n",
      "        [81.],\n",
      "        [22.],\n",
      "        [37.],\n",
      "        [82.],\n",
      "        [58.],\n",
      "        [85.],\n",
      "        [37.],\n",
      "        [38.],\n",
      "        [19.],\n",
      "        [92.],\n",
      "        [59.],\n",
      "        [33.],\n",
      "        [54.],\n",
      "        [39.],\n",
      "        [82.],\n",
      "        [56.],\n",
      "        [62.],\n",
      "        [67.],\n",
      "        [99.],\n",
      "        [98.],\n",
      "        [42.]])\n",
      "\n",
      "Each output is calculated in maximum 3 steps as follows:\n",
      "\n",
      "y0 = Ax + B\n",
      "\n",
      "y1 = ReLU(y0)\n",
      "\n",
      "y2 = (1 - y1)*f(x) + y1*g(x)\n",
      "\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "What output do you want to take for the tuning of parameters (type 0 (y0) or 1 (y1) or 2 (y2))?\n",
      " 1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "The error (every 250 steps):\n",
      "tensor(86191.4922, grad_fn=<MseLossBackward0>)\n",
      "tensor(85516.1094, grad_fn=<MseLossBackward0>)\n",
      "tensor(84847.4531, grad_fn=<MseLossBackward0>)\n",
      "tensor(84185.4531, grad_fn=<MseLossBackward0>)\n",
      "tensor(83530.0312, grad_fn=<MseLossBackward0>)\n",
      "tensor(82881.1328, grad_fn=<MseLossBackward0>)\n",
      "tensor(82238.6875, grad_fn=<MseLossBackward0>)\n",
      "tensor(81602.6406, grad_fn=<MseLossBackward0>)\n",
      "tensor(80972.9219, grad_fn=<MseLossBackward0>)\n",
      "tensor(80349.4766, grad_fn=<MseLossBackward0>)\n",
      "tensor(79732.2266, grad_fn=<MseLossBackward0>)\n",
      "tensor(79121.1172, grad_fn=<MseLossBackward0>)\n",
      "tensor(78516.0938, grad_fn=<MseLossBackward0>)\n",
      "tensor(77917.0781, grad_fn=<MseLossBackward0>)\n",
      "tensor(77324.0312, grad_fn=<MseLossBackward0>)\n",
      "tensor(76736.8906, grad_fn=<MseLossBackward0>)\n",
      "tensor(76155.5938, grad_fn=<MseLossBackward0>)\n",
      "tensor(75580.0703, grad_fn=<MseLossBackward0>)\n",
      "tensor(75010.2812, grad_fn=<MseLossBackward0>)\n",
      "tensor(74446.1484, grad_fn=<MseLossBackward0>)\n",
      "tensor(73887.6406, grad_fn=<MseLossBackward0>)\n",
      "tensor(73334.6875, grad_fn=<MseLossBackward0>)\n",
      "tensor(72787.2422, grad_fn=<MseLossBackward0>)\n",
      "tensor(72245.2422, grad_fn=<MseLossBackward0>)\n",
      "tensor(71708.6172, grad_fn=<MseLossBackward0>)\n",
      "tensor(71177.3516, grad_fn=<MseLossBackward0>)\n",
      "tensor(70651.3672, grad_fn=<MseLossBackward0>)\n",
      "tensor(70130.6172, grad_fn=<MseLossBackward0>)\n",
      "tensor(69615.0469, grad_fn=<MseLossBackward0>)\n",
      "tensor(69104.6172, grad_fn=<MseLossBackward0>)\n",
      "tensor(68599.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(68098.9297, grad_fn=<MseLossBackward0>)\n",
      "tensor(67603.5781, grad_fn=<MseLossBackward0>)\n",
      "tensor(67113.1562, grad_fn=<MseLossBackward0>)\n",
      "tensor(66627.6016, grad_fn=<MseLossBackward0>)\n",
      "tensor(66146.8906, grad_fn=<MseLossBackward0>)\n",
      "tensor(65670.9688, grad_fn=<MseLossBackward0>)\n",
      "tensor(65199.7695, grad_fn=<MseLossBackward0>)\n",
      "tensor(64733.2539, grad_fn=<MseLossBackward0>)\n",
      "tensor(64271.4062, grad_fn=<MseLossBackward0>)\n",
      "tensor(63814.1250, grad_fn=<MseLossBackward0>)\n",
      "tensor(63361.4102, grad_fn=<MseLossBackward0>)\n",
      "tensor(62913.2031, grad_fn=<MseLossBackward0>)\n",
      "tensor(62469.4414, grad_fn=<MseLossBackward0>)\n",
      "tensor(62030.1055, grad_fn=<MseLossBackward0>)\n",
      "tensor(61595.1406, grad_fn=<MseLossBackward0>)\n",
      "tensor(61164.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(60738.1484, grad_fn=<MseLossBackward0>)\n",
      "tensor(60316.0234, grad_fn=<MseLossBackward0>)\n",
      "tensor(59898.1211, grad_fn=<MseLossBackward0>)\n",
      "tensor(59484.3711, grad_fn=<MseLossBackward0>)\n",
      "tensor(59074.7188, grad_fn=<MseLossBackward0>)\n",
      "tensor(58669.1719, grad_fn=<MseLossBackward0>)\n",
      "tensor(58267.6406, grad_fn=<MseLossBackward0>)\n",
      "tensor(57870.1133, grad_fn=<MseLossBackward0>)\n",
      "tensor(57476.5312, grad_fn=<MseLossBackward0>)\n",
      "tensor(57086.8750, grad_fn=<MseLossBackward0>)\n",
      "tensor(56701.0703, grad_fn=<MseLossBackward0>)\n",
      "tensor(56319.1484, grad_fn=<MseLossBackward0>)\n",
      "tensor(55940.9766, grad_fn=<MseLossBackward0>)\n",
      "tensor(55566.6367, grad_fn=<MseLossBackward0>)\n",
      "tensor(55195.9492, grad_fn=<MseLossBackward0>)\n",
      "tensor(54829.0156, grad_fn=<MseLossBackward0>)\n",
      "tensor(54465.6719, grad_fn=<MseLossBackward0>)\n",
      "tensor(54105.9883, grad_fn=<MseLossBackward0>)\n",
      "tensor(53749.8438, grad_fn=<MseLossBackward0>)\n",
      "tensor(53397.3008, grad_fn=<MseLossBackward0>)\n",
      "tensor(53048.1992, grad_fn=<MseLossBackward0>)\n",
      "tensor(52702.6250, grad_fn=<MseLossBackward0>)\n",
      "tensor(52360.4688, grad_fn=<MseLossBackward0>)\n",
      "tensor(52021.7148, grad_fn=<MseLossBackward0>)\n",
      "tensor(51686.3438, grad_fn=<MseLossBackward0>)\n",
      "tensor(51354.2695, grad_fn=<MseLossBackward0>)\n",
      "tensor(51025.5586, grad_fn=<MseLossBackward0>)\n",
      "tensor(50700.0859, grad_fn=<MseLossBackward0>)\n",
      "tensor(50377.8281, grad_fn=<MseLossBackward0>)\n",
      "tensor(50058.8281, grad_fn=<MseLossBackward0>)\n",
      "tensor(49742.9766, grad_fn=<MseLossBackward0>)\n",
      "tensor(49430.2539, grad_fn=<MseLossBackward0>)\n",
      "tensor(49120.6797, grad_fn=<MseLossBackward0>)\n",
      "tensor(48814.1562, grad_fn=<MseLossBackward0>)\n",
      "tensor(48510.6602, grad_fn=<MseLossBackward0>)\n",
      "tensor(48210.2461, grad_fn=<MseLossBackward0>)\n",
      "tensor(47912.7891, grad_fn=<MseLossBackward0>)\n",
      "tensor(47618.2812, grad_fn=<MseLossBackward0>)\n",
      "tensor(47326.6836, grad_fn=<MseLossBackward0>)\n",
      "tensor(47038.0391, grad_fn=<MseLossBackward0>)\n",
      "tensor(46752.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(46469.2891, grad_fn=<MseLossBackward0>)\n",
      "tensor(46189.1406, grad_fn=<MseLossBackward0>)\n",
      "tensor(45911.7695, grad_fn=<MseLossBackward0>)\n",
      "tensor(45637.1836, grad_fn=<MseLossBackward0>)\n",
      "tensor(45365.3281, grad_fn=<MseLossBackward0>)\n",
      "tensor(45096.1602, grad_fn=<MseLossBackward0>)\n",
      "tensor(44829.6641, grad_fn=<MseLossBackward0>)\n",
      "tensor(44565.7852, grad_fn=<MseLossBackward0>)\n",
      "tensor(44304.4102, grad_fn=<MseLossBackward0>)\n",
      "tensor(44045.4219, grad_fn=<MseLossBackward0>)\n",
      "tensor(43789.0234, grad_fn=<MseLossBackward0>)\n",
      "tensor(43535.4453, grad_fn=<MseLossBackward0>)\n",
      "tensor(43284.3711, grad_fn=<MseLossBackward0>)\n",
      "tensor(43035.7891, grad_fn=<MseLossBackward0>)\n",
      "tensor(42789.6562, grad_fn=<MseLossBackward0>)\n",
      "tensor(42545.9609, grad_fn=<MseLossBackward0>)\n",
      "tensor(42304.6797, grad_fn=<MseLossBackward0>)\n",
      "tensor(42065.7891, grad_fn=<MseLossBackward0>)\n",
      "tensor(41829.2461, grad_fn=<MseLossBackward0>)\n",
      "tensor(41595.0430, grad_fn=<MseLossBackward0>)\n",
      "tensor(41363.1406, grad_fn=<MseLossBackward0>)\n",
      "tensor(41133.5312, grad_fn=<MseLossBackward0>)\n",
      "tensor(40906.1758, grad_fn=<MseLossBackward0>)\n",
      "tensor(40681.0586, grad_fn=<MseLossBackward0>)\n",
      "tensor(40458.1406, grad_fn=<MseLossBackward0>)\n",
      "tensor(40237.4219, grad_fn=<MseLossBackward0>)\n",
      "tensor(40018.8555, grad_fn=<MseLossBackward0>)\n",
      "tensor(39802.4258, grad_fn=<MseLossBackward0>)\n",
      "tensor(39588.1016, grad_fn=<MseLossBackward0>)\n",
      "tensor(39375.8906, grad_fn=<MseLossBackward0>)\n",
      "tensor(39165.7305, grad_fn=<MseLossBackward0>)\n",
      "tensor(38957.6094, grad_fn=<MseLossBackward0>)\n",
      "tensor(38751.4883, grad_fn=<MseLossBackward0>)\n",
      "tensor(38547.3398, grad_fn=<MseLossBackward0>)\n",
      "tensor(38345.1445, grad_fn=<MseLossBackward0>)\n",
      "tensor(38144.8672, grad_fn=<MseLossBackward0>)\n",
      "tensor(37946.5117, grad_fn=<MseLossBackward0>)\n",
      "tensor(37750.0391, grad_fn=<MseLossBackward0>)\n",
      "tensor(37555.3984, grad_fn=<MseLossBackward0>)\n",
      "tensor(37362.5508, grad_fn=<MseLossBackward0>)\n",
      "tensor(37171.4727, grad_fn=<MseLossBackward0>)\n",
      "tensor(36982.1641, grad_fn=<MseLossBackward0>)\n",
      "tensor(36794.5742, grad_fn=<MseLossBackward0>)\n",
      "tensor(36608.6406, grad_fn=<MseLossBackward0>)\n",
      "tensor(36424.3320, grad_fn=<MseLossBackward0>)\n",
      "tensor(36241.6250, grad_fn=<MseLossBackward0>)\n",
      "tensor(36060.4805, grad_fn=<MseLossBackward0>)\n",
      "tensor(35880.9141, grad_fn=<MseLossBackward0>)\n",
      "tensor(35702.6914, grad_fn=<MseLossBackward0>)\n",
      "tensor(35525.8164, grad_fn=<MseLossBackward0>)\n",
      "tensor(35350.4531, grad_fn=<MseLossBackward0>)\n",
      "tensor(35176.3867, grad_fn=<MseLossBackward0>)\n",
      "tensor(35003.5117, grad_fn=<MseLossBackward0>)\n",
      "tensor(34831.7969, grad_fn=<MseLossBackward0>)\n",
      "tensor(34661.1406, grad_fn=<MseLossBackward0>)\n",
      "tensor(34491.5625, grad_fn=<MseLossBackward0>)\n",
      "tensor(34322.9453, grad_fn=<MseLossBackward0>)\n",
      "tensor(34155.1055, grad_fn=<MseLossBackward0>)\n",
      "tensor(33987.9688, grad_fn=<MseLossBackward0>)\n",
      "tensor(33821.4961, grad_fn=<MseLossBackward0>)\n",
      "tensor(33655.8164, grad_fn=<MseLossBackward0>)\n",
      "tensor(33490.2305, grad_fn=<MseLossBackward0>)\n",
      "tensor(33324.8945, grad_fn=<MseLossBackward0>)\n",
      "tensor(33159.9219, grad_fn=<MseLossBackward0>)\n",
      "tensor(32994.8633, grad_fn=<MseLossBackward0>)\n",
      "tensor(32829.4805, grad_fn=<MseLossBackward0>)\n",
      "tensor(32663.9902, grad_fn=<MseLossBackward0>)\n",
      "tensor(32497.8594, grad_fn=<MseLossBackward0>)\n",
      "tensor(32330.9570, grad_fn=<MseLossBackward0>)\n",
      "tensor(32163.4180, grad_fn=<MseLossBackward0>)\n",
      "tensor(31994.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(31824.7266, grad_fn=<MseLossBackward0>)\n",
      "tensor(31653.1367, grad_fn=<MseLossBackward0>)\n",
      "tensor(31480.4629, grad_fn=<MseLossBackward0>)\n",
      "tensor(31305.6758, grad_fn=<MseLossBackward0>)\n",
      "tensor(31129.3828, grad_fn=<MseLossBackward0>)\n",
      "tensor(30951.0273, grad_fn=<MseLossBackward0>)\n",
      "tensor(30770.4902, grad_fn=<MseLossBackward0>)\n",
      "tensor(30588.5078, grad_fn=<MseLossBackward0>)\n",
      "tensor(30404.3477, grad_fn=<MseLossBackward0>)\n",
      "tensor(30218.1855, grad_fn=<MseLossBackward0>)\n",
      "tensor(30030.1953, grad_fn=<MseLossBackward0>)\n",
      "tensor(29841.3828, grad_fn=<MseLossBackward0>)\n",
      "tensor(29651.2617, grad_fn=<MseLossBackward0>)\n",
      "tensor(29460.2109, grad_fn=<MseLossBackward0>)\n",
      "tensor(29268.5879, grad_fn=<MseLossBackward0>)\n",
      "tensor(29076.8516, grad_fn=<MseLossBackward0>)\n",
      "tensor(28885.1543, grad_fn=<MseLossBackward0>)\n",
      "tensor(28694.1055, grad_fn=<MseLossBackward0>)\n",
      "tensor(28504.1719, grad_fn=<MseLossBackward0>)\n",
      "tensor(28316.1309, grad_fn=<MseLossBackward0>)\n",
      "tensor(28130.2617, grad_fn=<MseLossBackward0>)\n",
      "tensor(27946.4707, grad_fn=<MseLossBackward0>)\n",
      "tensor(27765.5898, grad_fn=<MseLossBackward0>)\n",
      "tensor(27587.5684, grad_fn=<MseLossBackward0>)\n",
      "tensor(27412.3906, grad_fn=<MseLossBackward0>)\n",
      "tensor(27239.8457, grad_fn=<MseLossBackward0>)\n",
      "tensor(27070.8945, grad_fn=<MseLossBackward0>)\n",
      "tensor(26905.3652, grad_fn=<MseLossBackward0>)\n",
      "tensor(26742.6602, grad_fn=<MseLossBackward0>)\n",
      "tensor(26582.8008, grad_fn=<MseLossBackward0>)\n",
      "tensor(26425.7383, grad_fn=<MseLossBackward0>)\n",
      "tensor(26271.3066, grad_fn=<MseLossBackward0>)\n",
      "tensor(26119.5977, grad_fn=<MseLossBackward0>)\n",
      "tensor(25970.4902, grad_fn=<MseLossBackward0>)\n",
      "tensor(25823.3672, grad_fn=<MseLossBackward0>)\n",
      "tensor(25678.2930, grad_fn=<MseLossBackward0>)\n",
      "tensor(25535.6445, grad_fn=<MseLossBackward0>)\n",
      "tensor(25394.5996, grad_fn=<MseLossBackward0>)\n",
      "tensor(25255.2949, grad_fn=<MseLossBackward0>)\n",
      "tensor(25117.9766, grad_fn=<MseLossBackward0>)\n",
      "tensor(24981.9199, grad_fn=<MseLossBackward0>)\n",
      "tensor(24847.5371, grad_fn=<MseLossBackward0>)\n",
      "tensor(24714.5742, grad_fn=<MseLossBackward0>)\n",
      "tensor(24582.6523, grad_fn=<MseLossBackward0>)\n",
      "tensor(24452.4492, grad_fn=<MseLossBackward0>)\n",
      "tensor(24323.0977, grad_fn=<MseLossBackward0>)\n",
      "tensor(24195.0859, grad_fn=<MseLossBackward0>)\n",
      "tensor(24068.1094, grad_fn=<MseLossBackward0>)\n",
      "tensor(23942.0957, grad_fn=<MseLossBackward0>)\n",
      "tensor(23817.3145, grad_fn=<MseLossBackward0>)\n",
      "tensor(23693.1816, grad_fn=<MseLossBackward0>)\n",
      "tensor(23570.4531, grad_fn=<MseLossBackward0>)\n",
      "tensor(23448.2871, grad_fn=<MseLossBackward0>)\n",
      "tensor(23327.3379, grad_fn=<MseLossBackward0>)\n",
      "tensor(23207.0625, grad_fn=<MseLossBackward0>)\n",
      "tensor(23087.8027, grad_fn=<MseLossBackward0>)\n",
      "tensor(22969.3477, grad_fn=<MseLossBackward0>)\n",
      "tensor(22851.7344, grad_fn=<MseLossBackward0>)\n",
      "tensor(22735.0449, grad_fn=<MseLossBackward0>)\n",
      "tensor(22619.0898, grad_fn=<MseLossBackward0>)\n",
      "tensor(22504.1133, grad_fn=<MseLossBackward0>)\n",
      "tensor(22389.7480, grad_fn=<MseLossBackward0>)\n",
      "tensor(22276.4395, grad_fn=<MseLossBackward0>)\n",
      "tensor(22163.5781, grad_fn=<MseLossBackward0>)\n",
      "tensor(22051.9043, grad_fn=<MseLossBackward0>)\n",
      "tensor(21940.6348, grad_fn=<MseLossBackward0>)\n",
      "tensor(21830.4473, grad_fn=<MseLossBackward0>)\n",
      "tensor(21720.7734, grad_fn=<MseLossBackward0>)\n",
      "tensor(21612.0254, grad_fn=<MseLossBackward0>)\n",
      "tensor(21503.9180, grad_fn=<MseLossBackward0>)\n",
      "tensor(21396.5879, grad_fn=<MseLossBackward0>)\n",
      "tensor(21290.0332, grad_fn=<MseLossBackward0>)\n",
      "tensor(21184.2266, grad_fn=<MseLossBackward0>)\n",
      "tensor(21079.1973, grad_fn=<MseLossBackward0>)\n",
      "tensor(20974.6348, grad_fn=<MseLossBackward0>)\n",
      "tensor(20871.0879, grad_fn=<MseLossBackward0>)\n",
      "tensor(20767.8906, grad_fn=<MseLossBackward0>)\n",
      "tensor(20665.6660, grad_fn=<MseLossBackward0>)\n",
      "tensor(20563.9258, grad_fn=<MseLossBackward0>)\n",
      "tensor(20462.8945, grad_fn=<MseLossBackward0>)\n",
      "tensor(20362.5957, grad_fn=<MseLossBackward0>)\n",
      "tensor(20262.7344, grad_fn=<MseLossBackward0>)\n",
      "tensor(20163.8652, grad_fn=<MseLossBackward0>)\n",
      "tensor(20065.3203, grad_fn=<MseLossBackward0>)\n",
      "tensor(19967.7070, grad_fn=<MseLossBackward0>)\n",
      "tensor(19870.5586, grad_fn=<MseLossBackward0>)\n",
      "tensor(19774.0156, grad_fn=<MseLossBackward0>)\n",
      "tensor(19678.2480, grad_fn=<MseLossBackward0>)\n",
      "tensor(19582.7891, grad_fn=<MseLossBackward0>)\n",
      "tensor(19488.3555, grad_fn=<MseLossBackward0>)\n",
      "tensor(19394.2578, grad_fn=<MseLossBackward0>)\n",
      "tensor(19300.8496, grad_fn=<MseLossBackward0>)\n",
      "tensor(19208.1074, grad_fn=<MseLossBackward0>)\n",
      "tensor(19115.7871, grad_fn=<MseLossBackward0>)\n",
      "tensor(19024.3711, grad_fn=<MseLossBackward0>)\n",
      "tensor(18933.2383, grad_fn=<MseLossBackward0>)\n",
      "tensor(18842.7910, grad_fn=<MseLossBackward0>)\n",
      "tensor(18752.9492, grad_fn=<MseLossBackward0>)\n",
      "tensor(18663.3848, grad_fn=<MseLossBackward0>)\n",
      "tensor(18574.7676, grad_fn=<MseLossBackward0>)\n",
      "tensor(18486.4766, grad_fn=<MseLossBackward0>)\n",
      "tensor(18398.6582, grad_fn=<MseLossBackward0>)\n",
      "tensor(18311.6250, grad_fn=<MseLossBackward0>)\n",
      "tensor(18224.8633, grad_fn=<MseLossBackward0>)\n",
      "tensor(18138.8105, grad_fn=<MseLossBackward0>)\n",
      "tensor(18053.2871, grad_fn=<MseLossBackward0>)\n",
      "tensor(17968.0352, grad_fn=<MseLossBackward0>)\n",
      "tensor(17883.7012, grad_fn=<MseLossBackward0>)\n",
      "tensor(17799.6719, grad_fn=<MseLossBackward0>)\n",
      "tensor(17716.0645, grad_fn=<MseLossBackward0>)\n",
      "tensor(17633.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(17550.6914, grad_fn=<MseLossBackward0>)\n",
      "tensor(17468.7402, grad_fn=<MseLossBackward0>)\n",
      "tensor(17387.3789, grad_fn=<MseLossBackward0>)\n",
      "tensor(17306.2734, grad_fn=<MseLossBackward0>)\n",
      "tensor(17225.9355, grad_fn=<MseLossBackward0>)\n",
      "tensor(17146.0098, grad_fn=<MseLossBackward0>)\n",
      "tensor(17066.3359, grad_fn=<MseLossBackward0>)\n",
      "tensor(16987.5742, grad_fn=<MseLossBackward0>)\n",
      "tensor(16909.0645, grad_fn=<MseLossBackward0>)\n",
      "tensor(16830.9277, grad_fn=<MseLossBackward0>)\n",
      "tensor(16753.5742, grad_fn=<MseLossBackward0>)\n",
      "tensor(16676.4609, grad_fn=<MseLossBackward0>)\n",
      "tensor(16599.8359, grad_fn=<MseLossBackward0>)\n",
      "tensor(16523.8652, grad_fn=<MseLossBackward0>)\n",
      "tensor(16448.1328, grad_fn=<MseLossBackward0>)\n",
      "tensor(16373.0625, grad_fn=<MseLossBackward0>)\n",
      "tensor(16298.4521, grad_fn=<MseLossBackward0>)\n",
      "tensor(16224.0664, grad_fn=<MseLossBackward0>)\n",
      "tensor(16150.3291, grad_fn=<MseLossBackward0>)\n",
      "tensor(16077.0352, grad_fn=<MseLossBackward0>)\n",
      "tensor(16003.9590, grad_fn=<MseLossBackward0>)\n",
      "tensor(15931.4863, grad_fn=<MseLossBackward0>)\n",
      "tensor(15859.4902, grad_fn=<MseLossBackward0>)\n",
      "tensor(15787.7021, grad_fn=<MseLossBackward0>)\n",
      "tensor(15716.4678, grad_fn=<MseLossBackward0>)\n",
      "tensor(15645.7461, grad_fn=<MseLossBackward0>)\n",
      "tensor(15575.2324, grad_fn=<MseLossBackward0>)\n",
      "tensor(15505.2324, grad_fn=<MseLossBackward0>)\n",
      "tensor(15435.7725, grad_fn=<MseLossBackward0>)\n",
      "tensor(15366.5137, grad_fn=<MseLossBackward0>)\n",
      "tensor(15297.6348, grad_fn=<MseLossBackward0>)\n",
      "tensor(15229.4062, grad_fn=<MseLossBackward0>)\n",
      "tensor(15161.3779, grad_fn=<MseLossBackward0>)\n",
      "tensor(15093.5908, grad_fn=<MseLossBackward0>)\n",
      "tensor(15026.5820, grad_fn=<MseLossBackward0>)\n",
      "tensor(14959.7646, grad_fn=<MseLossBackward0>)\n",
      "tensor(14893.1426, grad_fn=<MseLossBackward0>)\n",
      "tensor(14827.2324, grad_fn=<MseLossBackward0>)\n",
      "tensor(14761.6113, grad_fn=<MseLossBackward0>)\n",
      "tensor(14696.1836, grad_fn=<MseLossBackward0>)\n",
      "tensor(14631.3135, grad_fn=<MseLossBackward0>)\n",
      "tensor(14566.8750, grad_fn=<MseLossBackward0>)\n",
      "tensor(14502.6191, grad_fn=<MseLossBackward0>)\n",
      "tensor(14438.6914, grad_fn=<MseLossBackward0>)\n",
      "tensor(14375.4072, grad_fn=<MseLossBackward0>)\n",
      "tensor(14312.3047, grad_fn=<MseLossBackward0>)\n",
      "tensor(14249.3828, grad_fn=<MseLossBackward0>)\n",
      "tensor(14187.1504, grad_fn=<MseLossBackward0>)\n",
      "tensor(14125.1846, grad_fn=<MseLossBackward0>)\n",
      "tensor(14063.3945, grad_fn=<MseLossBackward0>)\n",
      "tensor(14002.0361, grad_fn=<MseLossBackward0>)\n",
      "tensor(13941.1953, grad_fn=<MseLossBackward0>)\n",
      "tensor(13880.5273, grad_fn=<MseLossBackward0>)\n",
      "tensor(13820.0322, grad_fn=<MseLossBackward0>)\n",
      "tensor(13760.2900, grad_fn=<MseLossBackward0>)\n",
      "tensor(13700.7197, grad_fn=<MseLossBackward0>)\n",
      "tensor(13641.3203, grad_fn=<MseLossBackward0>)\n",
      "tensor(13582.3379, grad_fn=<MseLossBackward0>)\n",
      "tensor(13523.8525, grad_fn=<MseLossBackward0>)\n",
      "tensor(13465.5283, grad_fn=<MseLossBackward0>)\n",
      "tensor(13407.3672, grad_fn=<MseLossBackward0>)\n",
      "tensor(13349.8604, grad_fn=<MseLossBackward0>)\n",
      "tensor(13292.6025, grad_fn=<MseLossBackward0>)\n",
      "tensor(13235.5078, grad_fn=<MseLossBackward0>)\n",
      "tensor(13178.6953, grad_fn=<MseLossBackward0>)\n",
      "tensor(13122.4902, grad_fn=<MseLossBackward0>)\n",
      "tensor(13066.4424, grad_fn=<MseLossBackward0>)\n",
      "tensor(13010.5498, grad_fn=<MseLossBackward0>)\n",
      "tensor(12955.1338, grad_fn=<MseLossBackward0>)\n",
      "tensor(12900.1201, grad_fn=<MseLossBackward0>)\n",
      "tensor(12845.2598, grad_fn=<MseLossBackward0>)\n",
      "tensor(12790.5547, grad_fn=<MseLossBackward0>)\n",
      "tensor(12736.4902, grad_fn=<MseLossBackward0>)\n",
      "tensor(12682.6475, grad_fn=<MseLossBackward0>)\n",
      "tensor(12628.9561, grad_fn=<MseLossBackward0>)\n",
      "tensor(12575.4912, grad_fn=<MseLossBackward0>)\n",
      "tensor(12522.6533, grad_fn=<MseLossBackward0>)\n",
      "tensor(12469.9678, grad_fn=<MseLossBackward0>)\n",
      "tensor(12417.4336, grad_fn=<MseLossBackward0>)\n",
      "tensor(12365.3096, grad_fn=<MseLossBackward0>)\n",
      "tensor(12313.6104, grad_fn=<MseLossBackward0>)\n",
      "tensor(12262.0537, grad_fn=<MseLossBackward0>)\n",
      "tensor(12210.6377, grad_fn=<MseLossBackward0>)\n",
      "tensor(12159.6436, grad_fn=<MseLossBackward0>)\n",
      "tensor(12109.0566, grad_fn=<MseLossBackward0>)\n",
      "tensor(12058.6035, grad_fn=<MseLossBackward0>)\n",
      "tensor(12008.2930, grad_fn=<MseLossBackward0>)\n",
      "tensor(11958.4336, grad_fn=<MseLossBackward0>)\n",
      "tensor(11908.9346, grad_fn=<MseLossBackward0>)\n",
      "tensor(11859.5723, grad_fn=<MseLossBackward0>)\n",
      "tensor(11810.3447, grad_fn=<MseLossBackward0>)\n",
      "tensor(11761.5820, grad_fn=<MseLossBackward0>)\n",
      "tensor(11713.1562, grad_fn=<MseLossBackward0>)\n",
      "tensor(11664.9287, grad_fn=<MseLossBackward0>)\n",
      "tensor(11616.8848, grad_fn=<MseLossBackward0>)\n",
      "tensor(11569.1426, grad_fn=<MseLossBackward0>)\n",
      "tensor(11521.7666, grad_fn=<MseLossBackward0>)\n",
      "tensor(11474.5186, grad_fn=<MseLossBackward0>)\n",
      "tensor(11427.4004, grad_fn=<MseLossBackward0>)\n",
      "tensor(11380.6514, grad_fn=<MseLossBackward0>)\n",
      "tensor(11334.3965, grad_fn=<MseLossBackward0>)\n",
      "tensor(11297.9180, grad_fn=<MseLossBackward0>)\n",
      "tensor(11253.0537, grad_fn=<MseLossBackward0>)\n",
      "tensor(11208.9746, grad_fn=<MseLossBackward0>)\n",
      "tensor(11165.9492, grad_fn=<MseLossBackward0>)\n",
      "tensor(11120.3252, grad_fn=<MseLossBackward0>)\n",
      "tensor(11078.7461, grad_fn=<MseLossBackward0>)\n",
      "tensor(11034.8379, grad_fn=<MseLossBackward0>)\n",
      "tensor(11116.9570, grad_fn=<MseLossBackward0>)\n",
      "tensor(11097.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(11035.0547, grad_fn=<MseLossBackward0>)\n",
      "tensor(11023.2490, grad_fn=<MseLossBackward0>)\n",
      "tensor(10969.5283, grad_fn=<MseLossBackward0>)\n",
      "tensor(10924.8262, grad_fn=<MseLossBackward0>)\n",
      "tensor(10890.0566, grad_fn=<MseLossBackward0>)\n",
      "tensor(10854.4688, grad_fn=<MseLossBackward0>)\n",
      "tensor(10804.9658, grad_fn=<MseLossBackward0>)\n",
      "tensor(10731.1973, grad_fn=<MseLossBackward0>)\n",
      "tensor(10760.8555, grad_fn=<MseLossBackward0>)\n",
      "tensor(10654.3623, grad_fn=<MseLossBackward0>)\n",
      "tensor(10621.1885, grad_fn=<MseLossBackward0>)\n",
      "tensor(10579.9248, grad_fn=<MseLossBackward0>)\n",
      "tensor(10566.7314, grad_fn=<MseLossBackward0>)\n",
      "tensor(10531.9150, grad_fn=<MseLossBackward0>)\n",
      "tensor(10522.5479, grad_fn=<MseLossBackward0>)\n",
      "tensor(10483.7725, grad_fn=<MseLossBackward0>)\n",
      "tensor(10411.0068, grad_fn=<MseLossBackward0>)\n",
      "tensor(10368.0801, grad_fn=<MseLossBackward0>)\n",
      "tensor(10346.7334, grad_fn=<MseLossBackward0>)\n",
      "tensor(10291.5195, grad_fn=<MseLossBackward0>)\n",
      "tensor(10309.3789, grad_fn=<MseLossBackward0>)\n",
      "tensor(10228.5420, grad_fn=<MseLossBackward0>)\n",
      "tensor(10190.4639, grad_fn=<MseLossBackward0>)\n",
      "tensor(10146.6338, grad_fn=<MseLossBackward0>)\n",
      "tensor(10150.1016, grad_fn=<MseLossBackward0>)\n",
      "tensor(10077.8770, grad_fn=<MseLossBackward0>)\n",
      "tensor(10044.3125, grad_fn=<MseLossBackward0>)\n",
      "tensor(10039.2725, grad_fn=<MseLossBackward0>)\n",
      "tensor(10045.4473, grad_fn=<MseLossBackward0>)\n",
      "tensor(9914.3926, grad_fn=<MseLossBackward0>)\n",
      "tensor(9900.1260, grad_fn=<MseLossBackward0>)\n",
      "tensor(9934.1602, grad_fn=<MseLossBackward0>)\n",
      "tensor(9880.8994, grad_fn=<MseLossBackward0>)\n",
      "tensor(9844.6201, grad_fn=<MseLossBackward0>)\n",
      "tensor(9740.0195, grad_fn=<MseLossBackward0>)\n",
      "tensor(9698.4873, grad_fn=<MseLossBackward0>)\n",
      "tensor(9667.5088, grad_fn=<MseLossBackward0>)\n",
      "tensor(9729.8223, grad_fn=<MseLossBackward0>)\n",
      "tensor(9665.6641, grad_fn=<MseLossBackward0>)\n",
      "tensor(9634.3467, grad_fn=<MseLossBackward0>)\n",
      "tensor(9605.8662, grad_fn=<MseLossBackward0>)\n",
      "tensor(9522.8428, grad_fn=<MseLossBackward0>)\n",
      "tensor(9480.3350, grad_fn=<MseLossBackward0>)\n",
      "tensor(9470.7305, grad_fn=<MseLossBackward0>)\n",
      "tensor(9430.1777, grad_fn=<MseLossBackward0>)\n",
      "tensor(9430.2979, grad_fn=<MseLossBackward0>)\n",
      "tensor(9399.7344, grad_fn=<MseLossBackward0>)\n",
      "tensor(9345.0498, grad_fn=<MseLossBackward0>)\n",
      "tensor(9309.0234, grad_fn=<MseLossBackward0>)\n",
      "tensor(9262.2979, grad_fn=<MseLossBackward0>)\n",
      "tensor(9211.5137, grad_fn=<MseLossBackward0>)\n",
      "tensor(9227.2305, grad_fn=<MseLossBackward0>)\n",
      "tensor(9162.8750, grad_fn=<MseLossBackward0>)\n",
      "tensor(9132.1104, grad_fn=<MseLossBackward0>)\n",
      "tensor(9074.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(9242.9521, grad_fn=<MseLossBackward0>)\n",
      "tensor(9216.7051, grad_fn=<MseLossBackward0>)\n",
      "tensor(9183.1289, grad_fn=<MseLossBackward0>)\n",
      "tensor(8955.1709, grad_fn=<MseLossBackward0>)\n",
      "tensor(8932.4170, grad_fn=<MseLossBackward0>)\n",
      "tensor(8886.4805, grad_fn=<MseLossBackward0>)\n",
      "tensor(8841.8652, grad_fn=<MseLossBackward0>)\n",
      "tensor(8766.0010, grad_fn=<MseLossBackward0>)\n",
      "tensor(8754.7832, grad_fn=<MseLossBackward0>)\n",
      "tensor(8704.7422, grad_fn=<MseLossBackward0>)\n",
      "tensor(8659.8457, grad_fn=<MseLossBackward0>)\n",
      "tensor(8658.8652, grad_fn=<MseLossBackward0>)\n",
      "tensor(8601.7549, grad_fn=<MseLossBackward0>)\n",
      "tensor(8577.0430, grad_fn=<MseLossBackward0>)\n",
      "tensor(8740.7852, grad_fn=<MseLossBackward0>)\n",
      "tensor(8514.7139, grad_fn=<MseLossBackward0>)\n",
      "tensor(8491.5283, grad_fn=<MseLossBackward0>)\n",
      "tensor(8676.7188, grad_fn=<MseLossBackward0>)\n",
      "tensor(8564.1484, grad_fn=<MseLossBackward0>)\n",
      "tensor(8533.4512, grad_fn=<MseLossBackward0>)\n",
      "tensor(8383.3008, grad_fn=<MseLossBackward0>)\n",
      "tensor(8725.8740, grad_fn=<MseLossBackward0>)\n",
      "tensor(8711.1914, grad_fn=<MseLossBackward0>)\n",
      "tensor(8458.8086, grad_fn=<MseLossBackward0>)\n",
      "tensor(8397.9658, grad_fn=<MseLossBackward0>)\n",
      "tensor(8575.7510, grad_fn=<MseLossBackward0>)\n",
      "tensor(8517.6055, grad_fn=<MseLossBackward0>)\n",
      "tensor(8489.2969, grad_fn=<MseLossBackward0>)\n",
      "tensor(8264.2373, grad_fn=<MseLossBackward0>)\n",
      "tensor(8249.6162, grad_fn=<MseLossBackward0>)\n",
      "tensor(8135.4419, grad_fn=<MseLossBackward0>)\n",
      "tensor(8163.6523, grad_fn=<MseLossBackward0>)\n",
      "tensor(8126.0444, grad_fn=<MseLossBackward0>)\n",
      "tensor(8112.9302, grad_fn=<MseLossBackward0>)\n",
      "tensor(8083.2715, grad_fn=<MseLossBackward0>)\n",
      "tensor(8006.0864, grad_fn=<MseLossBackward0>)\n",
      "tensor(7985.0737, grad_fn=<MseLossBackward0>)\n",
      "tensor(8113.3608, grad_fn=<MseLossBackward0>)\n",
      "tensor(8140.6763, grad_fn=<MseLossBackward0>)\n",
      "tensor(8092.3931, grad_fn=<MseLossBackward0>)\n",
      "tensor(8114.9785, grad_fn=<MseLossBackward0>)\n",
      "tensor(8059.4077, grad_fn=<MseLossBackward0>)\n",
      "tensor(7941.8096, grad_fn=<MseLossBackward0>)\n",
      "tensor(8021.7173, grad_fn=<MseLossBackward0>)\n",
      "tensor(7964.6836, grad_fn=<MseLossBackward0>)\n",
      "tensor(7883.3086, grad_fn=<MseLossBackward0>)\n",
      "tensor(7821.3521, grad_fn=<MseLossBackward0>)\n",
      "tensor(7803.0342, grad_fn=<MseLossBackward0>)\n",
      "tensor(7643.9639, grad_fn=<MseLossBackward0>)\n",
      "tensor(7599.2461, grad_fn=<MseLossBackward0>)\n",
      "tensor(7708.1392, grad_fn=<MseLossBackward0>)\n",
      "tensor(7637.9648, grad_fn=<MseLossBackward0>)\n",
      "tensor(7650.7007, grad_fn=<MseLossBackward0>)\n",
      "tensor(7612.5981, grad_fn=<MseLossBackward0>)\n",
      "tensor(7597.4194, grad_fn=<MseLossBackward0>)\n",
      "tensor(7561.3774, grad_fn=<MseLossBackward0>)\n",
      "tensor(7588.0015, grad_fn=<MseLossBackward0>)\n",
      "tensor(7532.5107, grad_fn=<MseLossBackward0>)\n",
      "tensor(7538.4204, grad_fn=<MseLossBackward0>)\n",
      "tensor(7475.0625, grad_fn=<MseLossBackward0>)\n",
      "tensor(7458.4736, grad_fn=<MseLossBackward0>)\n",
      "tensor(7379.9331, grad_fn=<MseLossBackward0>)\n",
      "tensor(7400.6973, grad_fn=<MseLossBackward0>)\n",
      "tensor(7316.8613, grad_fn=<MseLossBackward0>)\n",
      "tensor(7367.4800, grad_fn=<MseLossBackward0>)\n",
      "tensor(7321.5161, grad_fn=<MseLossBackward0>)\n",
      "tensor(7289.2563, grad_fn=<MseLossBackward0>)\n",
      "tensor(7296.2852, grad_fn=<MseLossBackward0>)\n",
      "tensor(7234.6113, grad_fn=<MseLossBackward0>)\n",
      "tensor(7228.6045, grad_fn=<MseLossBackward0>)\n",
      "tensor(7225.5557, grad_fn=<MseLossBackward0>)\n",
      "tensor(7145.0664, grad_fn=<MseLossBackward0>)\n",
      "tensor(7201.1919, grad_fn=<MseLossBackward0>)\n",
      "tensor(7068.5684, grad_fn=<MseLossBackward0>)\n",
      "tensor(7182.4258, grad_fn=<MseLossBackward0>)\n",
      "tensor(7155.4448, grad_fn=<MseLossBackward0>)\n",
      "tensor(7063.3276, grad_fn=<MseLossBackward0>)\n",
      "tensor(7037.0181, grad_fn=<MseLossBackward0>)\n",
      "tensor(7004.5171, grad_fn=<MseLossBackward0>)\n",
      "tensor(6955.7788, grad_fn=<MseLossBackward0>)\n",
      "tensor(7007.8037, grad_fn=<MseLossBackward0>)\n",
      "tensor(6936.5698, grad_fn=<MseLossBackward0>)\n",
      "tensor(6885.1738, grad_fn=<MseLossBackward0>)\n",
      "tensor(6870.7280, grad_fn=<MseLossBackward0>)\n",
      "tensor(6966.6611, grad_fn=<MseLossBackward0>)\n",
      "tensor(6909.0269, grad_fn=<MseLossBackward0>)\n",
      "tensor(6917.0312, grad_fn=<MseLossBackward0>)\n",
      "tensor(6870.2676, grad_fn=<MseLossBackward0>)\n",
      "tensor(6820.9312, grad_fn=<MseLossBackward0>)\n",
      "tensor(6781.6826, grad_fn=<MseLossBackward0>)\n",
      "tensor(6781.1802, grad_fn=<MseLossBackward0>)\n",
      "tensor(6807.8057, grad_fn=<MseLossBackward0>)\n",
      "tensor(6734.0327, grad_fn=<MseLossBackward0>)\n",
      "tensor(6847.7383, grad_fn=<MseLossBackward0>)\n",
      "tensor(6824.3486, grad_fn=<MseLossBackward0>)\n",
      "tensor(6654.6387, grad_fn=<MseLossBackward0>)\n",
      "tensor(6594.7432, grad_fn=<MseLossBackward0>)\n",
      "tensor(6739.9126, grad_fn=<MseLossBackward0>)\n",
      "tensor(6710.0088, grad_fn=<MseLossBackward0>)\n",
      "tensor(6686.4824, grad_fn=<MseLossBackward0>)\n",
      "tensor(6534.3521, grad_fn=<MseLossBackward0>)\n",
      "tensor(6617.8848, grad_fn=<MseLossBackward0>)\n",
      "tensor(6606.7539, grad_fn=<MseLossBackward0>)\n",
      "tensor(6484.2207, grad_fn=<MseLossBackward0>)\n",
      "tensor(6452.0317, grad_fn=<MseLossBackward0>)\n",
      "tensor(6374.1255, grad_fn=<MseLossBackward0>)\n",
      "tensor(6342.3545, grad_fn=<MseLossBackward0>)\n",
      "tensor(6377.7246, grad_fn=<MseLossBackward0>)\n",
      "tensor(6329.2012, grad_fn=<MseLossBackward0>)\n",
      "tensor(6320.2568, grad_fn=<MseLossBackward0>)\n",
      "tensor(6292.9204, grad_fn=<MseLossBackward0>)\n",
      "tensor(6411.5488, grad_fn=<MseLossBackward0>)\n",
      "tensor(6368.0444, grad_fn=<MseLossBackward0>)\n",
      "tensor(6318.8511, grad_fn=<MseLossBackward0>)\n",
      "tensor(6391.5654, grad_fn=<MseLossBackward0>)\n",
      "tensor(6357.6230, grad_fn=<MseLossBackward0>)\n",
      "tensor(6278.5205, grad_fn=<MseLossBackward0>)\n",
      "tensor(6257.9663, grad_fn=<MseLossBackward0>)\n",
      "tensor(6219.9980, grad_fn=<MseLossBackward0>)\n",
      "tensor(6251.5381, grad_fn=<MseLossBackward0>)\n",
      "tensor(6075.7993, grad_fn=<MseLossBackward0>)\n",
      "tensor(6153.0308, grad_fn=<MseLossBackward0>)\n",
      "tensor(6164.7886, grad_fn=<MseLossBackward0>)\n",
      "tensor(6125.9868, grad_fn=<MseLossBackward0>)\n",
      "tensor(6077.3613, grad_fn=<MseLossBackward0>)\n",
      "tensor(6059.5942, grad_fn=<MseLossBackward0>)\n",
      "tensor(6189.9575, grad_fn=<MseLossBackward0>)\n",
      "tensor(6126.1343, grad_fn=<MseLossBackward0>)\n",
      "tensor(6172.2969, grad_fn=<MseLossBackward0>)\n",
      "tensor(6026.3745, grad_fn=<MseLossBackward0>)\n",
      "tensor(5947.8887, grad_fn=<MseLossBackward0>)\n",
      "tensor(6056.2720, grad_fn=<MseLossBackward0>)\n",
      "tensor(5957.8252, grad_fn=<MseLossBackward0>)\n",
      "tensor(5857.8164, grad_fn=<MseLossBackward0>)\n",
      "tensor(6032.6235, grad_fn=<MseLossBackward0>)\n",
      "tensor(6034.9517, grad_fn=<MseLossBackward0>)\n",
      "tensor(5846.7744, grad_fn=<MseLossBackward0>)\n",
      "tensor(5878.9004, grad_fn=<MseLossBackward0>)\n",
      "tensor(6053.9512, grad_fn=<MseLossBackward0>)\n",
      "tensor(5963.0005, grad_fn=<MseLossBackward0>)\n",
      "tensor(5738.6426, grad_fn=<MseLossBackward0>)\n",
      "tensor(5850.8076, grad_fn=<MseLossBackward0>)\n",
      "tensor(5774.6543, grad_fn=<MseLossBackward0>)\n",
      "tensor(5812.7505, grad_fn=<MseLossBackward0>)\n",
      "tensor(5738.7031, grad_fn=<MseLossBackward0>)\n",
      "tensor(5821.7148, grad_fn=<MseLossBackward0>)\n",
      "tensor(5725.6064, grad_fn=<MseLossBackward0>)\n",
      "tensor(5986.5850, grad_fn=<MseLossBackward0>)\n",
      "tensor(5727.8892, grad_fn=<MseLossBackward0>)\n",
      "tensor(5649.5532, grad_fn=<MseLossBackward0>)\n",
      "tensor(5612.8008, grad_fn=<MseLossBackward0>)\n",
      "tensor(5680.2930, grad_fn=<MseLossBackward0>)\n",
      "tensor(5553.5205, grad_fn=<MseLossBackward0>)\n",
      "tensor(5713.3662, grad_fn=<MseLossBackward0>)\n",
      "tensor(5632.8511, grad_fn=<MseLossBackward0>)\n",
      "tensor(5480.5225, grad_fn=<MseLossBackward0>)\n",
      "tensor(5633.2881, grad_fn=<MseLossBackward0>)\n",
      "tensor(5647.4888, grad_fn=<MseLossBackward0>)\n",
      "tensor(5673.7725, grad_fn=<MseLossBackward0>)\n",
      "tensor(5592.8369, grad_fn=<MseLossBackward0>)\n",
      "tensor(5442.4194, grad_fn=<MseLossBackward0>)\n",
      "tensor(5560.6763, grad_fn=<MseLossBackward0>)\n",
      "tensor(5524.8599, grad_fn=<MseLossBackward0>)\n",
      "tensor(5464.0938, grad_fn=<MseLossBackward0>)\n",
      "tensor(5448.9473, grad_fn=<MseLossBackward0>)\n",
      "tensor(5712.6875, grad_fn=<MseLossBackward0>)\n",
      "tensor(5517.9839, grad_fn=<MseLossBackward0>)\n",
      "tensor(5478.7949, grad_fn=<MseLossBackward0>)\n",
      "tensor(5260.4663, grad_fn=<MseLossBackward0>)\n",
      "tensor(5646.0186, grad_fn=<MseLossBackward0>)\n",
      "tensor(5425.9570, grad_fn=<MseLossBackward0>)\n",
      "tensor(5418.0527, grad_fn=<MseLossBackward0>)\n",
      "tensor(5318.8950, grad_fn=<MseLossBackward0>)\n",
      "tensor(5520.4575, grad_fn=<MseLossBackward0>)\n",
      "tensor(5356.5454, grad_fn=<MseLossBackward0>)\n",
      "tensor(5366.6006, grad_fn=<MseLossBackward0>)\n",
      "tensor(5175.1650, grad_fn=<MseLossBackward0>)\n",
      "tensor(5145.8198, grad_fn=<MseLossBackward0>)\n",
      "tensor(5194.3066, grad_fn=<MseLossBackward0>)\n",
      "tensor(5110.7383, grad_fn=<MseLossBackward0>)\n",
      "tensor(5392.6343, grad_fn=<MseLossBackward0>)\n",
      "tensor(5220.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(5326.4243, grad_fn=<MseLossBackward0>)\n",
      "tensor(5358.6421, grad_fn=<MseLossBackward0>)\n",
      "tensor(5118.3652, grad_fn=<MseLossBackward0>)\n",
      "tensor(5109.3809, grad_fn=<MseLossBackward0>)\n",
      "tensor(5038.9624, grad_fn=<MseLossBackward0>)\n",
      "tensor(5320.7539, grad_fn=<MseLossBackward0>)\n",
      "tensor(5280.8848, grad_fn=<MseLossBackward0>)\n",
      "tensor(5193.5630, grad_fn=<MseLossBackward0>)\n",
      "tensor(5077.0576, grad_fn=<MseLossBackward0>)\n",
      "tensor(5045.6367, grad_fn=<MseLossBackward0>)\n",
      "tensor(5157.6748, grad_fn=<MseLossBackward0>)\n",
      "tensor(5159.3423, grad_fn=<MseLossBackward0>)\n",
      "tensor(4964.0024, grad_fn=<MseLossBackward0>)\n",
      "tensor(4841.1982, grad_fn=<MseLossBackward0>)\n",
      "tensor(5140.5195, grad_fn=<MseLossBackward0>)\n",
      "tensor(5022.7236, grad_fn=<MseLossBackward0>)\n",
      "tensor(4941.7725, grad_fn=<MseLossBackward0>)\n",
      "tensor(4988.9072, grad_fn=<MseLossBackward0>)\n",
      "tensor(4914.7959, grad_fn=<MseLossBackward0>)\n",
      "tensor(4807.8081, grad_fn=<MseLossBackward0>)\n",
      "tensor(4973.4175, grad_fn=<MseLossBackward0>)\n",
      "tensor(4842.6245, grad_fn=<MseLossBackward0>)\n",
      "tensor(5156.9976, grad_fn=<MseLossBackward0>)\n",
      "tensor(4897.6470, grad_fn=<MseLossBackward0>)\n",
      "tensor(4939.2520, grad_fn=<MseLossBackward0>)\n",
      "tensor(4839.5205, grad_fn=<MseLossBackward0>)\n",
      "tensor(4849.9102, grad_fn=<MseLossBackward0>)\n",
      "tensor(4834.0063, grad_fn=<MseLossBackward0>)\n",
      "tensor(4831.7559, grad_fn=<MseLossBackward0>)\n",
      "tensor(4809.5933, grad_fn=<MseLossBackward0>)\n",
      "tensor(4754.1499, grad_fn=<MseLossBackward0>)\n",
      "tensor(4768.8911, grad_fn=<MseLossBackward0>)\n",
      "tensor(4786.4067, grad_fn=<MseLossBackward0>)\n",
      "tensor(4759.8433, grad_fn=<MseLossBackward0>)\n",
      "tensor(4766.7832, grad_fn=<MseLossBackward0>)\n",
      "tensor(4710.7793, grad_fn=<MseLossBackward0>)\n",
      "tensor(4835.4424, grad_fn=<MseLossBackward0>)\n",
      "tensor(4588.8062, grad_fn=<MseLossBackward0>)\n",
      "tensor(4560.8735, grad_fn=<MseLossBackward0>)\n",
      "tensor(4828.1714, grad_fn=<MseLossBackward0>)\n",
      "tensor(4655.8467, grad_fn=<MseLossBackward0>)\n",
      "tensor(4864.6724, grad_fn=<MseLossBackward0>)\n",
      "tensor(4724.2061, grad_fn=<MseLossBackward0>)\n",
      "tensor(4722.4800, grad_fn=<MseLossBackward0>)\n",
      "tensor(4603.2510, grad_fn=<MseLossBackward0>)\n",
      "tensor(4586.3652, grad_fn=<MseLossBackward0>)\n",
      "tensor(4564.0586, grad_fn=<MseLossBackward0>)\n",
      "tensor(4500.9053, grad_fn=<MseLossBackward0>)\n",
      "tensor(4415.8062, grad_fn=<MseLossBackward0>)\n",
      "tensor(4467.2573, grad_fn=<MseLossBackward0>)\n",
      "tensor(4468.3022, grad_fn=<MseLossBackward0>)\n",
      "tensor(4407.9087, grad_fn=<MseLossBackward0>)\n",
      "tensor(4403.9014, grad_fn=<MseLossBackward0>)\n",
      "tensor(4400.8662, grad_fn=<MseLossBackward0>)\n",
      "tensor(4369.8296, grad_fn=<MseLossBackward0>)\n",
      "tensor(4405.0854, grad_fn=<MseLossBackward0>)\n",
      "tensor(4556.5601, grad_fn=<MseLossBackward0>)\n",
      "tensor(4546.3647, grad_fn=<MseLossBackward0>)\n",
      "tensor(4531.7363, grad_fn=<MseLossBackward0>)\n",
      "tensor(4513.0264, grad_fn=<MseLossBackward0>)\n",
      "tensor(4514.5942, grad_fn=<MseLossBackward0>)\n",
      "tensor(4458.3247, grad_fn=<MseLossBackward0>)\n",
      "tensor(4453.6880, grad_fn=<MseLossBackward0>)\n",
      "tensor(4477.4702, grad_fn=<MseLossBackward0>)\n",
      "tensor(4433.5259, grad_fn=<MseLossBackward0>)\n",
      "tensor(4366.0015, grad_fn=<MseLossBackward0>)\n",
      "tensor(4320.0610, grad_fn=<MseLossBackward0>)\n",
      "tensor(4305.3691, grad_fn=<MseLossBackward0>)\n",
      "tensor(4284.8687, grad_fn=<MseLossBackward0>)\n",
      "tensor(4210.2329, grad_fn=<MseLossBackward0>)\n",
      "tensor(4193.7910, grad_fn=<MseLossBackward0>)\n",
      "tensor(4183.0449, grad_fn=<MseLossBackward0>)\n",
      "tensor(4119.5640, grad_fn=<MseLossBackward0>)\n",
      "tensor(4112.1064, grad_fn=<MseLossBackward0>)\n",
      "tensor(4146.9727, grad_fn=<MseLossBackward0>)\n",
      "tensor(4234.0942, grad_fn=<MseLossBackward0>)\n",
      "tensor(4219.4746, grad_fn=<MseLossBackward0>)\n",
      "tensor(4181.7368, grad_fn=<MseLossBackward0>)\n",
      "tensor(4154.8730, grad_fn=<MseLossBackward0>)\n",
      "tensor(4205.8926, grad_fn=<MseLossBackward0>)\n",
      "tensor(4160.6353, grad_fn=<MseLossBackward0>)\n",
      "tensor(4171.2861, grad_fn=<MseLossBackward0>)\n",
      "tensor(4141.3945, grad_fn=<MseLossBackward0>)\n",
      "tensor(4243.2056, grad_fn=<MseLossBackward0>)\n",
      "tensor(4156.1445, grad_fn=<MseLossBackward0>)\n",
      "tensor(4247.1338, grad_fn=<MseLossBackward0>)\n",
      "tensor(4284.4824, grad_fn=<MseLossBackward0>)\n",
      "tensor(4220.2085, grad_fn=<MseLossBackward0>)\n",
      "tensor(4066.6128, grad_fn=<MseLossBackward0>)\n",
      "tensor(4030.8284, grad_fn=<MseLossBackward0>)\n",
      "tensor(4153.0254, grad_fn=<MseLossBackward0>)\n",
      "tensor(4129.6289, grad_fn=<MseLossBackward0>)\n",
      "tensor(4042.5457, grad_fn=<MseLossBackward0>)\n",
      "tensor(4036.3452, grad_fn=<MseLossBackward0>)\n",
      "tensor(4007.6104, grad_fn=<MseLossBackward0>)\n",
      "tensor(3921., grad_fn=<MseLossBackward0>)\n",
      "tensor(3917.9919, grad_fn=<MseLossBackward0>)\n",
      "tensor(3905.2151, grad_fn=<MseLossBackward0>)\n",
      "tensor(3965.5647, grad_fn=<MseLossBackward0>)\n",
      "tensor(3939.4622, grad_fn=<MseLossBackward0>)\n",
      "tensor(3919.7288, grad_fn=<MseLossBackward0>)\n",
      "tensor(4015.3782, grad_fn=<MseLossBackward0>)\n",
      "tensor(3892.4885, grad_fn=<MseLossBackward0>)\n",
      "tensor(3840.3643, grad_fn=<MseLossBackward0>)\n",
      "tensor(4003.3916, grad_fn=<MseLossBackward0>)\n",
      "tensor(3962.4087, grad_fn=<MseLossBackward0>)\n",
      "tensor(3866.0322, grad_fn=<MseLossBackward0>)\n",
      "tensor(3856.7146, grad_fn=<MseLossBackward0>)\n",
      "tensor(3991.0857, grad_fn=<MseLossBackward0>)\n",
      "tensor(3922.2151, grad_fn=<MseLossBackward0>)\n",
      "tensor(3879.5432, grad_fn=<MseLossBackward0>)\n",
      "tensor(3870.9309, grad_fn=<MseLossBackward0>)\n",
      "tensor(3922.0420, grad_fn=<MseLossBackward0>)\n",
      "tensor(3908.0171, grad_fn=<MseLossBackward0>)\n",
      "tensor(3845.0439, grad_fn=<MseLossBackward0>)\n",
      "tensor(3842.9993, grad_fn=<MseLossBackward0>)\n",
      "tensor(3843.0603, grad_fn=<MseLossBackward0>)\n",
      "tensor(3868.8171, grad_fn=<MseLossBackward0>)\n",
      "tensor(3717.8306, grad_fn=<MseLossBackward0>)\n",
      "tensor(3807.1394, grad_fn=<MseLossBackward0>)\n",
      "tensor(3783.3860, grad_fn=<MseLossBackward0>)\n",
      "tensor(3741.6228, grad_fn=<MseLossBackward0>)\n",
      "tensor(3724.5923, grad_fn=<MseLossBackward0>)\n",
      "tensor(3757.8774, grad_fn=<MseLossBackward0>)\n",
      "tensor(3869.0283, grad_fn=<MseLossBackward0>)\n",
      "tensor(3853.8643, grad_fn=<MseLossBackward0>)\n",
      "tensor(3841.3872, grad_fn=<MseLossBackward0>)\n",
      "tensor(3613.5154, grad_fn=<MseLossBackward0>)\n",
      "tensor(3652.9644, grad_fn=<MseLossBackward0>)\n",
      "tensor(3669.3608, grad_fn=<MseLossBackward0>)\n",
      "tensor(3715.4607, grad_fn=<MseLossBackward0>)\n",
      "tensor(3679.1995, grad_fn=<MseLossBackward0>)\n",
      "tensor(3738.7231, grad_fn=<MseLossBackward0>)\n",
      "tensor(3639.7234, grad_fn=<MseLossBackward0>)\n",
      "tensor(3657.5938, grad_fn=<MseLossBackward0>)\n",
      "tensor(3593.9546, grad_fn=<MseLossBackward0>)\n",
      "tensor(3761.9434, grad_fn=<MseLossBackward0>)\n",
      "tensor(3739.2134, grad_fn=<MseLossBackward0>)\n",
      "tensor(3859.0840, grad_fn=<MseLossBackward0>)\n",
      "tensor(3689.3613, grad_fn=<MseLossBackward0>)\n",
      "tensor(3810.0491, grad_fn=<MseLossBackward0>)\n",
      "tensor(3854.0405, grad_fn=<MseLossBackward0>)\n",
      "tensor(3573.5288, grad_fn=<MseLossBackward0>)\n",
      "tensor(3630.8994, grad_fn=<MseLossBackward0>)\n",
      "tensor(3591.6372, grad_fn=<MseLossBackward0>)\n",
      "tensor(3540.2937, grad_fn=<MseLossBackward0>)\n",
      "tensor(3654.8325, grad_fn=<MseLossBackward0>)\n",
      "tensor(3481.0354, grad_fn=<MseLossBackward0>)\n",
      "tensor(3788.3445, grad_fn=<MseLossBackward0>)\n",
      "tensor(3916.4150, grad_fn=<MseLossBackward0>)\n",
      "tensor(3661.9651, grad_fn=<MseLossBackward0>)\n",
      "tensor(3768.5569, grad_fn=<MseLossBackward0>)\n",
      "tensor(3719.4421, grad_fn=<MseLossBackward0>)\n",
      "tensor(3836.8174, grad_fn=<MseLossBackward0>)\n",
      "tensor(3880.6548, grad_fn=<MseLossBackward0>)\n",
      "tensor(3413.1797, grad_fn=<MseLossBackward0>)\n",
      "tensor(3851.6951, grad_fn=<MseLossBackward0>)\n",
      "tensor(3529.8169, grad_fn=<MseLossBackward0>)\n",
      "tensor(3699.4417, grad_fn=<MseLossBackward0>)\n",
      "tensor(3679.0500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3454.3735, grad_fn=<MseLossBackward0>)\n",
      "tensor(3409.2866, grad_fn=<MseLossBackward0>)\n",
      "tensor(3616.8447, grad_fn=<MseLossBackward0>)\n",
      "tensor(3533.3992, grad_fn=<MseLossBackward0>)\n",
      "tensor(3820.7832, grad_fn=<MseLossBackward0>)\n",
      "tensor(3890.1741, grad_fn=<MseLossBackward0>)\n",
      "tensor(3707.2764, grad_fn=<MseLossBackward0>)\n",
      "tensor(3332.4060, grad_fn=<MseLossBackward0>)\n",
      "tensor(3349.3955, grad_fn=<MseLossBackward0>)\n",
      "tensor(3437.8081, grad_fn=<MseLossBackward0>)\n",
      "tensor(3622.2075, grad_fn=<MseLossBackward0>)\n",
      "tensor(3361.4150, grad_fn=<MseLossBackward0>)\n",
      "tensor(3534.6484, grad_fn=<MseLossBackward0>)\n",
      "tensor(3401.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3526.7188, grad_fn=<MseLossBackward0>)\n",
      "tensor(3357.8428, grad_fn=<MseLossBackward0>)\n",
      "tensor(3742.8704, grad_fn=<MseLossBackward0>)\n",
      "tensor(3364.2280, grad_fn=<MseLossBackward0>)\n",
      "tensor(3564.7637, grad_fn=<MseLossBackward0>)\n",
      "tensor(3213.2678, grad_fn=<MseLossBackward0>)\n",
      "tensor(3457.9346, grad_fn=<MseLossBackward0>)\n",
      "tensor(3629.9875, grad_fn=<MseLossBackward0>)\n",
      "tensor(3214.4758, grad_fn=<MseLossBackward0>)\n",
      "tensor(3490.5649, grad_fn=<MseLossBackward0>)\n",
      "tensor(3541.1553, grad_fn=<MseLossBackward0>)\n",
      "tensor(3479.1152, grad_fn=<MseLossBackward0>)\n",
      "tensor(3671.3796, grad_fn=<MseLossBackward0>)\n",
      "tensor(3240.5618, grad_fn=<MseLossBackward0>)\n",
      "tensor(3426.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3363.4087, grad_fn=<MseLossBackward0>)\n",
      "tensor(3110.1946, grad_fn=<MseLossBackward0>)\n",
      "tensor(3370.5491, grad_fn=<MseLossBackward0>)\n",
      "tensor(3298.9207, grad_fn=<MseLossBackward0>)\n",
      "tensor(3210.9429, grad_fn=<MseLossBackward0>)\n",
      "tensor(3491.6565, grad_fn=<MseLossBackward0>)\n",
      "tensor(3137.5918, grad_fn=<MseLossBackward0>)\n",
      "tensor(3414.1040, grad_fn=<MseLossBackward0>)\n",
      "tensor(3050.5122, grad_fn=<MseLossBackward0>)\n",
      "tensor(3046.4937, grad_fn=<MseLossBackward0>)\n",
      "tensor(3283.9563, grad_fn=<MseLossBackward0>)\n",
      "tensor(3357.9551, grad_fn=<MseLossBackward0>)\n",
      "tensor(3281.3472, grad_fn=<MseLossBackward0>)\n",
      "tensor(3270.6138, grad_fn=<MseLossBackward0>)\n",
      "tensor(3320.5186, grad_fn=<MseLossBackward0>)\n",
      "tensor(3309.7849, grad_fn=<MseLossBackward0>)\n",
      "tensor(3249.3079, grad_fn=<MseLossBackward0>)\n",
      "tensor(3210.2151, grad_fn=<MseLossBackward0>)\n",
      "tensor(3318.0610, grad_fn=<MseLossBackward0>)\n",
      "tensor(3522.2769, grad_fn=<MseLossBackward0>)\n",
      "tensor(3146.6257, grad_fn=<MseLossBackward0>)\n",
      "tensor(3041.9385, grad_fn=<MseLossBackward0>)\n",
      "tensor(3416.2712, grad_fn=<MseLossBackward0>)\n",
      "tensor(3275.8105, grad_fn=<MseLossBackward0>)\n",
      "tensor(3246.6829, grad_fn=<MseLossBackward0>)\n",
      "tensor(2969.4546, grad_fn=<MseLossBackward0>)\n",
      "tensor(3241.3977, grad_fn=<MseLossBackward0>)\n",
      "tensor(3433.5081, grad_fn=<MseLossBackward0>)\n",
      "tensor(3169.5845, grad_fn=<MseLossBackward0>)\n",
      "tensor(3209.4412, grad_fn=<MseLossBackward0>)\n",
      "tensor(3089.9138, grad_fn=<MseLossBackward0>)\n",
      "tensor(3132.6860, grad_fn=<MseLossBackward0>)\n",
      "tensor(3051.6807, grad_fn=<MseLossBackward0>)\n",
      "tensor(3510.4941, grad_fn=<MseLossBackward0>)\n",
      "tensor(3040.8462, grad_fn=<MseLossBackward0>)\n",
      "tensor(3283.0852, grad_fn=<MseLossBackward0>)\n",
      "tensor(3163.5312, grad_fn=<MseLossBackward0>)\n",
      "tensor(3480.7209, grad_fn=<MseLossBackward0>)\n",
      "tensor(2993.7832, grad_fn=<MseLossBackward0>)\n",
      "tensor(3279.2742, grad_fn=<MseLossBackward0>)\n",
      "tensor(3124.0054, grad_fn=<MseLossBackward0>)\n",
      "tensor(3025.3157, grad_fn=<MseLossBackward0>)\n",
      "tensor(3421.7241, grad_fn=<MseLossBackward0>)\n",
      "tensor(2791.2703, grad_fn=<MseLossBackward0>)\n",
      "tensor(3201.4788, grad_fn=<MseLossBackward0>)\n",
      "tensor(2777.0354, grad_fn=<MseLossBackward0>)\n",
      "tensor(2977.3652, grad_fn=<MseLossBackward0>)\n",
      "tensor(3107.1641, grad_fn=<MseLossBackward0>)\n",
      "tensor(3170.7698, grad_fn=<MseLossBackward0>)\n",
      "tensor(3055.8481, grad_fn=<MseLossBackward0>)\n",
      "tensor(2765.8201, grad_fn=<MseLossBackward0>)\n",
      "tensor(2989.3044, grad_fn=<MseLossBackward0>)\n",
      "tensor(2961.0459, grad_fn=<MseLossBackward0>)\n",
      "tensor(3060.0063, grad_fn=<MseLossBackward0>)\n",
      "tensor(2971.8704, grad_fn=<MseLossBackward0>)\n",
      "tensor(3053.3999, grad_fn=<MseLossBackward0>)\n",
      "tensor(2900.3584, grad_fn=<MseLossBackward0>)\n",
      "tensor(3008.5498, grad_fn=<MseLossBackward0>)\n",
      "tensor(3241.8325, grad_fn=<MseLossBackward0>)\n",
      "tensor(2671.3970, grad_fn=<MseLossBackward0>)\n",
      "tensor(2942.3804, grad_fn=<MseLossBackward0>)\n",
      "tensor(2828.4275, grad_fn=<MseLossBackward0>)\n",
      "tensor(2839.9338, grad_fn=<MseLossBackward0>)\n",
      "tensor(3258.6904, grad_fn=<MseLossBackward0>)\n",
      "tensor(2816.5222, grad_fn=<MseLossBackward0>)\n",
      "tensor(2971.9924, grad_fn=<MseLossBackward0>)\n",
      "tensor(2771.1990, grad_fn=<MseLossBackward0>)\n",
      "tensor(2873.3960, grad_fn=<MseLossBackward0>)\n",
      "tensor(3187.0852, grad_fn=<MseLossBackward0>)\n",
      "tensor(3110.8079, grad_fn=<MseLossBackward0>)\n",
      "tensor(2584.4158, grad_fn=<MseLossBackward0>)\n",
      "tensor(2573.1824, grad_fn=<MseLossBackward0>)\n",
      "tensor(2911.8250, grad_fn=<MseLossBackward0>)\n",
      "tensor(2848.7837, grad_fn=<MseLossBackward0>)\n",
      "tensor(2761.9531, grad_fn=<MseLossBackward0>)\n",
      "tensor(2863.6206, grad_fn=<MseLossBackward0>)\n",
      "tensor(2852.7556, grad_fn=<MseLossBackward0>)\n",
      "tensor(2881.6584, grad_fn=<MseLossBackward0>)\n",
      "tensor(3132.5046, grad_fn=<MseLossBackward0>)\n",
      "tensor(2850.6626, grad_fn=<MseLossBackward0>)\n",
      "tensor(2764.2319, grad_fn=<MseLossBackward0>)\n",
      "tensor(2749.2854, grad_fn=<MseLossBackward0>)\n",
      "tensor(3060.7122, grad_fn=<MseLossBackward0>)\n",
      "tensor(2787.9785, grad_fn=<MseLossBackward0>)\n",
      "tensor(2925.4934, grad_fn=<MseLossBackward0>)\n",
      "tensor(2689.6909, grad_fn=<MseLossBackward0>)\n",
      "tensor(2790.0093, grad_fn=<MseLossBackward0>)\n",
      "tensor(2657.7705, grad_fn=<MseLossBackward0>)\n",
      "tensor(2649.2891, grad_fn=<MseLossBackward0>)\n",
      "tensor(2737.4404, grad_fn=<MseLossBackward0>)\n",
      "tensor(2630.9893, grad_fn=<MseLossBackward0>)\n",
      "tensor(2898.9065, grad_fn=<MseLossBackward0>)\n",
      "tensor(2618.5024, grad_fn=<MseLossBackward0>)\n",
      "tensor(2622.1707, grad_fn=<MseLossBackward0>)\n",
      "tensor(2589.7634, grad_fn=<MseLossBackward0>)\n",
      "tensor(2826.2612, grad_fn=<MseLossBackward0>)\n",
      "tensor(2812.6541, grad_fn=<MseLossBackward0>)\n",
      "tensor(2946.5288, grad_fn=<MseLossBackward0>)\n",
      "tensor(2779.2468, grad_fn=<MseLossBackward0>)\n",
      "tensor(2765.5774, grad_fn=<MseLossBackward0>)\n",
      "tensor(2652.3445, grad_fn=<MseLossBackward0>)\n",
      "tensor(2638.9360, grad_fn=<MseLossBackward0>)\n",
      "tensor(2788.7778, grad_fn=<MseLossBackward0>)\n",
      "tensor(2773.3457, grad_fn=<MseLossBackward0>)\n",
      "tensor(2601.8506, grad_fn=<MseLossBackward0>)\n",
      "tensor(2587.0977, grad_fn=<MseLossBackward0>)\n",
      "tensor(2689.2888, grad_fn=<MseLossBackward0>)\n",
      "tensor(2593.2131, grad_fn=<MseLossBackward0>)\n",
      "tensor(2752.9744, grad_fn=<MseLossBackward0>)\n",
      "tensor(2570.3274, grad_fn=<MseLossBackward0>)\n",
      "tensor(2671.9907, grad_fn=<MseLossBackward0>)\n",
      "tensor(2644.8730, grad_fn=<MseLossBackward0>)\n",
      "tensor(2642.1794, grad_fn=<MseLossBackward0>)\n",
      "tensor(2730.6855, grad_fn=<MseLossBackward0>)\n",
      "tensor(2618.6621, grad_fn=<MseLossBackward0>)\n",
      "tensor(2671.1372, grad_fn=<MseLossBackward0>)\n",
      "tensor(2642.0701, grad_fn=<MseLossBackward0>)\n",
      "tensor(2666.0718, grad_fn=<MseLossBackward0>)\n",
      "tensor(2610.2710, grad_fn=<MseLossBackward0>)\n",
      "tensor(2646.4717, grad_fn=<MseLossBackward0>)\n",
      "tensor(2631.9153, grad_fn=<MseLossBackward0>)\n",
      "tensor(2606.4172, grad_fn=<MseLossBackward0>)\n",
      "tensor(2585.6509, grad_fn=<MseLossBackward0>)\n",
      "tensor(2553.9617, grad_fn=<MseLossBackward0>)\n",
      "tensor(2685.1619, grad_fn=<MseLossBackward0>)\n",
      "tensor(2570.4321, grad_fn=<MseLossBackward0>)\n",
      "tensor(2543.2954, grad_fn=<MseLossBackward0>)\n",
      "tensor(2642.8896, grad_fn=<MseLossBackward0>)\n",
      "tensor(2654.8232, grad_fn=<MseLossBackward0>)\n",
      "tensor(2519.1704, grad_fn=<MseLossBackward0>)\n",
      "tensor(2540.3362, grad_fn=<MseLossBackward0>)\n",
      "tensor(2495.6821, grad_fn=<MseLossBackward0>)\n",
      "tensor(2560.3013, grad_fn=<MseLossBackward0>)\n",
      "tensor(2539.4395, grad_fn=<MseLossBackward0>)\n",
      "tensor(2475.5012, grad_fn=<MseLossBackward0>)\n",
      "tensor(2525.4478, grad_fn=<MseLossBackward0>)\n",
      "tensor(2564.1514, grad_fn=<MseLossBackward0>)\n",
      "tensor(2485.2332, grad_fn=<MseLossBackward0>)\n",
      "tensor(2548.1042, grad_fn=<MseLossBackward0>)\n",
      "tensor(2452.4844, grad_fn=<MseLossBackward0>)\n",
      "tensor(2500.2539, grad_fn=<MseLossBackward0>)\n",
      "tensor(2558.4939, grad_fn=<MseLossBackward0>)\n",
      "tensor(2469.7119, grad_fn=<MseLossBackward0>)\n",
      "tensor(2525.5154, grad_fn=<MseLossBackward0>)\n",
      "tensor(2447.0752, grad_fn=<MseLossBackward0>)\n",
      "tensor(2545.0198, grad_fn=<MseLossBackward0>)\n",
      "tensor(2500.1409, grad_fn=<MseLossBackward0>)\n",
      "tensor(2483.2292, grad_fn=<MseLossBackward0>)\n",
      "tensor(2500.4629, grad_fn=<MseLossBackward0>)\n",
      "tensor(2488.6255, grad_fn=<MseLossBackward0>)\n",
      "tensor(2446.7812, grad_fn=<MseLossBackward0>)\n",
      "tensor(2367.3691, grad_fn=<MseLossBackward0>)\n",
      "tensor(2416.0820, grad_fn=<MseLossBackward0>)\n",
      "tensor(2505.1260, grad_fn=<MseLossBackward0>)\n",
      "tensor(2369.5237, grad_fn=<MseLossBackward0>)\n",
      "tensor(2493.1257, grad_fn=<MseLossBackward0>)\n",
      "tensor(2418.7019, grad_fn=<MseLossBackward0>)\n",
      "tensor(2432.9092, grad_fn=<MseLossBackward0>)\n",
      "tensor(2437.1697, grad_fn=<MseLossBackward0>)\n",
      "tensor(2421.8105, grad_fn=<MseLossBackward0>)\n",
      "tensor(2392.5598, grad_fn=<MseLossBackward0>)\n",
      "tensor(2448.6477, grad_fn=<MseLossBackward0>)\n",
      "tensor(2384.1782, grad_fn=<MseLossBackward0>)\n",
      "tensor(2405.4885, grad_fn=<MseLossBackward0>)\n",
      "tensor(2352.3982, grad_fn=<MseLossBackward0>)\n",
      "tensor(2364.8071, grad_fn=<MseLossBackward0>)\n",
      "tensor(2373.1758, grad_fn=<MseLossBackward0>)\n",
      "tensor(2376.5310, grad_fn=<MseLossBackward0>)\n",
      "tensor(2376.1130, grad_fn=<MseLossBackward0>)\n",
      "tensor(2377.8896, grad_fn=<MseLossBackward0>)\n",
      "tensor(2310.7568, grad_fn=<MseLossBackward0>)\n",
      "tensor(2317.0645, grad_fn=<MseLossBackward0>)\n",
      "tensor(2332.6487, grad_fn=<MseLossBackward0>)\n",
      "tensor(2358.4429, grad_fn=<MseLossBackward0>)\n",
      "tensor(2335.1416, grad_fn=<MseLossBackward0>)\n",
      "tensor(2325.9333, grad_fn=<MseLossBackward0>)\n",
      "tensor(2335.1238, grad_fn=<MseLossBackward0>)\n",
      "tensor(2298.3259, grad_fn=<MseLossBackward0>)\n",
      "tensor(2286.4138, grad_fn=<MseLossBackward0>)\n",
      "tensor(2304.0710, grad_fn=<MseLossBackward0>)\n",
      "tensor(2279.1448, grad_fn=<MseLossBackward0>)\n",
      "tensor(2285.6147, grad_fn=<MseLossBackward0>)\n",
      "tensor(2259.7441, grad_fn=<MseLossBackward0>)\n",
      "tensor(2267.0337, grad_fn=<MseLossBackward0>)\n",
      "tensor(2248.5701, grad_fn=<MseLossBackward0>)\n",
      "tensor(2165.1272, grad_fn=<MseLossBackward0>)\n",
      "tensor(2126.9597, grad_fn=<MseLossBackward0>)\n",
      "tensor(2143.7668, grad_fn=<MseLossBackward0>)\n",
      "tensor(2152.9468, grad_fn=<MseLossBackward0>)\n",
      "tensor(2150.3608, grad_fn=<MseLossBackward0>)\n",
      "tensor(2130.3398, grad_fn=<MseLossBackward0>)\n",
      "tensor(2135.2712, grad_fn=<MseLossBackward0>)\n",
      "tensor(2117.5002, grad_fn=<MseLossBackward0>)\n",
      "tensor(2120.6443, grad_fn=<MseLossBackward0>)\n",
      "tensor(2102.6184, grad_fn=<MseLossBackward0>)\n",
      "tensor(2103.3069, grad_fn=<MseLossBackward0>)\n",
      "tensor(2121.8423, grad_fn=<MseLossBackward0>)\n",
      "tensor(2116.3489, grad_fn=<MseLossBackward0>)\n",
      "tensor(2084.1936, grad_fn=<MseLossBackward0>)\n",
      "tensor(2111.1331, grad_fn=<MseLossBackward0>)\n",
      "tensor(2106.6548, grad_fn=<MseLossBackward0>)\n",
      "tensor(2076.7856, grad_fn=<MseLossBackward0>)\n",
      "tensor(2104.3962, grad_fn=<MseLossBackward0>)\n",
      "tensor(2098.5132, grad_fn=<MseLossBackward0>)\n",
      "tensor(2062.1455, grad_fn=<MseLossBackward0>)\n",
      "tensor(2081.1416, grad_fn=<MseLossBackward0>)\n",
      "tensor(2065.1807, grad_fn=<MseLossBackward0>)\n",
      "tensor(2058.4792, grad_fn=<MseLossBackward0>)\n",
      "tensor(2068.8096, grad_fn=<MseLossBackward0>)\n",
      "tensor(2075.7415, grad_fn=<MseLossBackward0>)\n",
      "tensor(2045.9302, grad_fn=<MseLossBackward0>)\n",
      "tensor(2070.2231, grad_fn=<MseLossBackward0>)\n",
      "tensor(2054.2620, grad_fn=<MseLossBackward0>)\n",
      "tensor(2046.7769, grad_fn=<MseLossBackward0>)\n",
      "tensor(2045.3862, grad_fn=<MseLossBackward0>)\n",
      "tensor(2050.3052, grad_fn=<MseLossBackward0>)\n",
      "tensor(2061.5232, grad_fn=<MseLossBackward0>)\n",
      "tensor(2028.9790, grad_fn=<MseLossBackward0>)\n",
      "tensor(2047.1288, grad_fn=<MseLossBackward0>)\n",
      "tensor(2021.8583, grad_fn=<MseLossBackward0>)\n",
      "tensor(2041.4580, grad_fn=<MseLossBackward0>)\n",
      "tensor(2016.9739, grad_fn=<MseLossBackward0>)\n",
      "tensor(2041.1234, grad_fn=<MseLossBackward0>)\n",
      "tensor(2016.1416, grad_fn=<MseLossBackward0>)\n",
      "tensor(2040.8163, grad_fn=<MseLossBackward0>)\n",
      "tensor(2014.5750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1991.6676, grad_fn=<MseLossBackward0>)\n",
      "tensor(2013.1752, grad_fn=<MseLossBackward0>)\n",
      "tensor(1988.1726, grad_fn=<MseLossBackward0>)\n",
      "tensor(2013.2258, grad_fn=<MseLossBackward0>)\n",
      "tensor(1968.6277, grad_fn=<MseLossBackward0>)\n",
      "tensor(1981.5392, grad_fn=<MseLossBackward0>)\n",
      "tensor(1955.7142, grad_fn=<MseLossBackward0>)\n",
      "tensor(1958.3402, grad_fn=<MseLossBackward0>)\n",
      "tensor(1947.5465, grad_fn=<MseLossBackward0>)\n",
      "tensor(1960.5458, grad_fn=<MseLossBackward0>)\n",
      "tensor(1956.4730, grad_fn=<MseLossBackward0>)\n",
      "tensor(1935.3824, grad_fn=<MseLossBackward0>)\n",
      "tensor(1933.5585, grad_fn=<MseLossBackward0>)\n",
      "tensor(1950.0201, grad_fn=<MseLossBackward0>)\n",
      "tensor(1945.6150, grad_fn=<MseLossBackward0>)\n",
      "tensor(1917.8337, grad_fn=<MseLossBackward0>)\n",
      "tensor(1948.2922, grad_fn=<MseLossBackward0>)\n",
      "tensor(1910.5392, grad_fn=<MseLossBackward0>)\n",
      "tensor(1929.8319, grad_fn=<MseLossBackward0>)\n",
      "tensor(1922.6412, grad_fn=<MseLossBackward0>)\n",
      "tensor(1932.3582, grad_fn=<MseLossBackward0>)\n",
      "tensor(1914.5378, grad_fn=<MseLossBackward0>)\n",
      "tensor(1909.7812, grad_fn=<MseLossBackward0>)\n",
      "tensor(1915.5077, grad_fn=<MseLossBackward0>)\n",
      "tensor(1892.2258, grad_fn=<MseLossBackward0>)\n",
      "tensor(1921.6908, grad_fn=<MseLossBackward0>)\n",
      "tensor(1918.5067, grad_fn=<MseLossBackward0>)\n",
      "tensor(1882.7059, grad_fn=<MseLossBackward0>)\n",
      "tensor(1903.0022, grad_fn=<MseLossBackward0>)\n",
      "tensor(1886.9075, grad_fn=<MseLossBackward0>)\n",
      "tensor(1876.8521, grad_fn=<MseLossBackward0>)\n",
      "tensor(1872.3956, grad_fn=<MseLossBackward0>)\n",
      "tensor(1872.9159, grad_fn=<MseLossBackward0>)\n",
      "tensor(1876.9965, grad_fn=<MseLossBackward0>)\n",
      "tensor(1887.1027, grad_fn=<MseLossBackward0>)\n",
      "tensor(1856.9709, grad_fn=<MseLossBackward0>)\n",
      "tensor(1871.9508, grad_fn=<MseLossBackward0>)\n",
      "tensor(1849.7618, grad_fn=<MseLossBackward0>)\n",
      "tensor(1873.0811, grad_fn=<MseLossBackward0>)\n",
      "tensor(1856.2092, grad_fn=<MseLossBackward0>)\n",
      "tensor(1842.9241, grad_fn=<MseLossBackward0>)\n",
      "tensor(1875.8743, grad_fn=<MseLossBackward0>)\n",
      "tensor(1865.7141, grad_fn=<MseLossBackward0>)\n",
      "tensor(1856.1453, grad_fn=<MseLossBackward0>)\n",
      "tensor(1846.6879, grad_fn=<MseLossBackward0>)\n",
      "tensor(1838.0789, grad_fn=<MseLossBackward0>)\n",
      "tensor(1829.5835, grad_fn=<MseLossBackward0>)\n",
      "tensor(1821.7148, grad_fn=<MseLossBackward0>)\n",
      "tensor(1858.4789, grad_fn=<MseLossBackward0>)\n",
      "tensor(1811.8961, grad_fn=<MseLossBackward0>)\n",
      "tensor(1801.4705, grad_fn=<MseLossBackward0>)\n",
      "tensor(1827.1818, grad_fn=<MseLossBackward0>)\n",
      "tensor(1815.8632, grad_fn=<MseLossBackward0>)\n",
      "tensor(1843.9580, grad_fn=<MseLossBackward0>)\n",
      "tensor(1832.4585, grad_fn=<MseLossBackward0>)\n",
      "tensor(1779.8964, grad_fn=<MseLossBackward0>)\n",
      "tensor(1839.8712, grad_fn=<MseLossBackward0>)\n",
      "tensor(1778.9591, grad_fn=<MseLossBackward0>)\n",
      "tensor(1833.6371, grad_fn=<MseLossBackward0>)\n",
      "tensor(1764.0199, grad_fn=<MseLossBackward0>)\n",
      "tensor(1800.7305, grad_fn=<MseLossBackward0>)\n",
      "tensor(1798.0005, grad_fn=<MseLossBackward0>)\n",
      "tensor(1751.1149, grad_fn=<MseLossBackward0>)\n",
      "tensor(1809.3422, grad_fn=<MseLossBackward0>)\n",
      "tensor(1746.1044, grad_fn=<MseLossBackward0>)\n",
      "tensor(1785.4009, grad_fn=<MseLossBackward0>)\n",
      "tensor(1783.2568, grad_fn=<MseLossBackward0>)\n",
      "tensor(1812.4730, grad_fn=<MseLossBackward0>)\n",
      "tensor(1785.7147, grad_fn=<MseLossBackward0>)\n",
      "tensor(1789.8500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1746.5099, grad_fn=<MseLossBackward0>)\n",
      "tensor(1727.8246, grad_fn=<MseLossBackward0>)\n",
      "tensor(1733.5316, grad_fn=<MseLossBackward0>)\n",
      "tensor(1765.5212, grad_fn=<MseLossBackward0>)\n",
      "tensor(1745.4615, grad_fn=<MseLossBackward0>)\n",
      "tensor(1752.1106, grad_fn=<MseLossBackward0>)\n",
      "tensor(1787.8588, grad_fn=<MseLossBackward0>)\n",
      "tensor(1758.7611, grad_fn=<MseLossBackward0>)\n",
      "tensor(1752.9570, grad_fn=<MseLossBackward0>)\n",
      "tensor(1772.8219, grad_fn=<MseLossBackward0>)\n",
      "tensor(1731.0190, grad_fn=<MseLossBackward0>)\n",
      "tensor(1717.9189, grad_fn=<MseLossBackward0>)\n",
      "tensor(1724.2081, grad_fn=<MseLossBackward0>)\n",
      "tensor(1745.5721, grad_fn=<MseLossBackward0>)\n",
      "tensor(1713.1608, grad_fn=<MseLossBackward0>)\n",
      "tensor(1701.8889, grad_fn=<MseLossBackward0>)\n",
      "tensor(1708.9694, grad_fn=<MseLossBackward0>)\n",
      "tensor(1737.6908, grad_fn=<MseLossBackward0>)\n",
      "tensor(1720.7236, grad_fn=<MseLossBackward0>)\n",
      "tensor(1716.4999, grad_fn=<MseLossBackward0>)\n",
      "tensor(1728.7017, grad_fn=<MseLossBackward0>)\n",
      "tensor(1673.1353, grad_fn=<MseLossBackward0>)\n",
      "tensor(1717.9624, grad_fn=<MseLossBackward0>)\n",
      "tensor(1699.2483, grad_fn=<MseLossBackward0>)\n",
      "tensor(1696.2583, grad_fn=<MseLossBackward0>)\n",
      "tensor(1717.3313, grad_fn=<MseLossBackward0>)\n",
      "tensor(1666.3756, grad_fn=<MseLossBackward0>)\n",
      "tensor(1718.8645, grad_fn=<MseLossBackward0>)\n",
      "tensor(1702.6078, grad_fn=<MseLossBackward0>)\n",
      "tensor(1703.2957, grad_fn=<MseLossBackward0>)\n",
      "tensor(1646.6575, grad_fn=<MseLossBackward0>)\n",
      "tensor(1678.7792, grad_fn=<MseLossBackward0>)\n",
      "tensor(1644.1217, grad_fn=<MseLossBackward0>)\n",
      "tensor(1637.7056, grad_fn=<MseLossBackward0>)\n",
      "tensor(1714.7053, grad_fn=<MseLossBackward0>)\n",
      "tensor(1697.5029, grad_fn=<MseLossBackward0>)\n",
      "tensor(1628.8671, grad_fn=<MseLossBackward0>)\n",
      "tensor(1687.6552, grad_fn=<MseLossBackward0>)\n",
      "tensor(1697.1075, grad_fn=<MseLossBackward0>)\n",
      "tensor(1687.1963, grad_fn=<MseLossBackward0>)\n",
      "tensor(1782.2719, grad_fn=<MseLossBackward0>)\n",
      "tensor(1677.4967, grad_fn=<MseLossBackward0>)\n",
      "tensor(1759.1250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1665.5181, grad_fn=<MseLossBackward0>)\n",
      "tensor(1746.2336, grad_fn=<MseLossBackward0>)\n",
      "tensor(1665.2908, grad_fn=<MseLossBackward0>)\n",
      "tensor(1639.7723, grad_fn=<MseLossBackward0>)\n",
      "tensor(1635.9374, grad_fn=<MseLossBackward0>)\n",
      "tensor(1630.7345, grad_fn=<MseLossBackward0>)\n",
      "tensor(1631.2903, grad_fn=<MseLossBackward0>)\n",
      "tensor(1613.6584, grad_fn=<MseLossBackward0>)\n",
      "tensor(1605.8040, grad_fn=<MseLossBackward0>)\n",
      "tensor(1599.5557, grad_fn=<MseLossBackward0>)\n",
      "tensor(1623.6251, grad_fn=<MseLossBackward0>)\n",
      "tensor(1583.9812, grad_fn=<MseLossBackward0>)\n",
      "tensor(1612.2556, grad_fn=<MseLossBackward0>)\n",
      "tensor(1582.3102, grad_fn=<MseLossBackward0>)\n",
      "tensor(1587.3260, grad_fn=<MseLossBackward0>)\n",
      "tensor(1580.5027, grad_fn=<MseLossBackward0>)\n",
      "tensor(1595.7981, grad_fn=<MseLossBackward0>)\n",
      "tensor(1714.0609, grad_fn=<MseLossBackward0>)\n",
      "tensor(1717.5522, grad_fn=<MseLossBackward0>)\n",
      "tensor(1693.4214, grad_fn=<MseLossBackward0>)\n",
      "tensor(1570.2086, grad_fn=<MseLossBackward0>)\n",
      "tensor(1581.5430, grad_fn=<MseLossBackward0>)\n",
      "tensor(1650.0520, grad_fn=<MseLossBackward0>)\n",
      "tensor(1574.7827, grad_fn=<MseLossBackward0>)\n",
      "tensor(1565.0765, grad_fn=<MseLossBackward0>)\n",
      "tensor(1694.5396, grad_fn=<MseLossBackward0>)\n",
      "tensor(1555.2599, grad_fn=<MseLossBackward0>)\n",
      "tensor(1686.1324, grad_fn=<MseLossBackward0>)\n",
      "tensor(1533.5125, grad_fn=<MseLossBackward0>)\n",
      "tensor(1648.6176, grad_fn=<MseLossBackward0>)\n",
      "tensor(1522.0570, grad_fn=<MseLossBackward0>)\n",
      "tensor(1607.3760, grad_fn=<MseLossBackward0>)\n",
      "tensor(1535.2750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1670.7455, grad_fn=<MseLossBackward0>)\n",
      "tensor(1516.7347, grad_fn=<MseLossBackward0>)\n",
      "tensor(1524.3064, grad_fn=<MseLossBackward0>)\n",
      "tensor(1650.3979, grad_fn=<MseLossBackward0>)\n",
      "tensor(1641.3115, grad_fn=<MseLossBackward0>)\n",
      "tensor(1506.4937, grad_fn=<MseLossBackward0>)\n",
      "tensor(1572.0737, grad_fn=<MseLossBackward0>)\n",
      "tensor(1606.3855, grad_fn=<MseLossBackward0>)\n",
      "tensor(1582.7679, grad_fn=<MseLossBackward0>)\n",
      "tensor(1589.0450, grad_fn=<MseLossBackward0>)\n",
      "tensor(1605.4778, grad_fn=<MseLossBackward0>)\n",
      "tensor(1595.2759, grad_fn=<MseLossBackward0>)\n",
      "tensor(1606.4944, grad_fn=<MseLossBackward0>)\n",
      "tensor(1629.5270, grad_fn=<MseLossBackward0>)\n",
      "tensor(1623.8336, grad_fn=<MseLossBackward0>)\n",
      "tensor(1585.7573, grad_fn=<MseLossBackward0>)\n",
      "tensor(1555.4463, grad_fn=<MseLossBackward0>)\n",
      "tensor(1588.0713, grad_fn=<MseLossBackward0>)\n",
      "tensor(1654.6157, grad_fn=<MseLossBackward0>)\n",
      "tensor(1567.8065, grad_fn=<MseLossBackward0>)\n",
      "tensor(1576.1295, grad_fn=<MseLossBackward0>)\n",
      "tensor(1534.4504, grad_fn=<MseLossBackward0>)\n",
      "\n",
      "The output of the NN (post tuning) is:\n",
      " tensor([[291.0687],\n",
      "        [193.8778],\n",
      "        [371.0561],\n",
      "        [221.6466],\n",
      "        [193.8778],\n",
      "        [371.0561],\n",
      "        [371.0561],\n",
      "        [147.5965],\n",
      "        [369.7470],\n",
      "        [110.5714],\n",
      "        [226.2748],\n",
      "        [147.5965],\n",
      "        [371.0561],\n",
      "        [ 87.4307],\n",
      "        [  8.7523],\n",
      "        [286.4406],\n",
      "        [365.1189],\n",
      "        [156.8527],\n",
      "        [203.1341],\n",
      "        [124.4558],\n",
      "        [240.1592],\n",
      "        [300.3250],\n",
      "        [267.9280],\n",
      "        [ 27.2649],\n",
      "        [304.9531],\n",
      "        [309.5812],\n",
      "        [235.5311],\n",
      "        [ 68.9181],\n",
      "        [147.5965],\n",
      "        [281.8124],\n",
      "        [217.0185],\n",
      "        [110.5714],\n",
      "        [198.5060],\n",
      "        [371.0561],\n",
      "        [124.4558],\n",
      "        [ 73.5462],\n",
      "        [ 41.1493],\n",
      "        [105.9432],\n",
      "        [371.0561],\n",
      "        [179.9934],\n",
      "        [323.4656],\n",
      "        [371.0561],\n",
      "        [371.0561],\n",
      "        [272.5562],\n",
      "        [124.4558],\n",
      "        [371.0561],\n",
      "        [ 27.2649],\n",
      "        [ 13.3805],\n",
      "        [341.9782],\n",
      "        [ 36.5211],\n",
      "        [ 22.6367],\n",
      "        [235.5311],\n",
      "        [ 22.6367],\n",
      "        [166.1090],\n",
      "        [110.5714],\n",
      "        [332.7219],\n",
      "        [318.8375],\n",
      "        [152.2246],\n",
      "        [207.7622],\n",
      "        [365.1189],\n",
      "        [371.0561],\n",
      "        [272.5562],\n",
      "        [371.0561],\n",
      "        [371.0561],\n",
      "        [133.7121],\n",
      "        [371.0561],\n",
      "        [170.7371],\n",
      "        [110.5714],\n",
      "        [371.0561],\n",
      "        [240.1592],\n",
      "        [314.2094],\n",
      "        [371.0561],\n",
      "        [267.9280],\n",
      "        [314.2094],\n",
      "        [341.9782],\n",
      "        [ 18.0086],\n",
      "        [101.3151],\n",
      "        [371.0561],\n",
      "        [179.9934],\n",
      "        [371.0561],\n",
      "        [101.3151],\n",
      "        [170.7371],\n",
      "        [371.0561],\n",
      "        [267.9280],\n",
      "        [371.0561],\n",
      "        [170.7371],\n",
      "        [175.3653],\n",
      "        [ 87.4307],\n",
      "        [371.0561],\n",
      "        [272.5562],\n",
      "        [152.2246],\n",
      "        [249.4155],\n",
      "        [179.9934],\n",
      "        [371.0561],\n",
      "        [258.6717],\n",
      "        [286.4406],\n",
      "        [309.5812],\n",
      "        [371.0561],\n",
      "        [371.0561],\n",
      "        [193.8778]]) \n",
      " The target output (from measurements) is:\n",
      " tensor([[315.],\n",
      "        [210.],\n",
      "        [480.],\n",
      "        [240.],\n",
      "        [210.],\n",
      "        [410.],\n",
      "        [490.],\n",
      "        [160.],\n",
      "        [400.],\n",
      "        [120.],\n",
      "        [245.],\n",
      "        [160.],\n",
      "        [405.],\n",
      "        [ 95.],\n",
      "        [ 10.],\n",
      "        [310.],\n",
      "        [395.],\n",
      "        [170.],\n",
      "        [220.],\n",
      "        [135.],\n",
      "        [260.],\n",
      "        [325.],\n",
      "        [290.],\n",
      "        [ 30.],\n",
      "        [330.],\n",
      "        [335.],\n",
      "        [255.],\n",
      "        [ 75.],\n",
      "        [160.],\n",
      "        [305.],\n",
      "        [235.],\n",
      "        [120.],\n",
      "        [215.],\n",
      "        [450.],\n",
      "        [135.],\n",
      "        [ 80.],\n",
      "        [ 45.],\n",
      "        [115.],\n",
      "        [415.],\n",
      "        [195.],\n",
      "        [350.],\n",
      "        [405.],\n",
      "        [410.],\n",
      "        [295.],\n",
      "        [135.],\n",
      "        [440.],\n",
      "        [ 30.],\n",
      "        [ 15.],\n",
      "        [370.],\n",
      "        [ 40.],\n",
      "        [ 25.],\n",
      "        [255.],\n",
      "        [ 25.],\n",
      "        [180.],\n",
      "        [120.],\n",
      "        [360.],\n",
      "        [345.],\n",
      "        [165.],\n",
      "        [225.],\n",
      "        [395.],\n",
      "        [485.],\n",
      "        [295.],\n",
      "        [445.],\n",
      "        [420.],\n",
      "        [145.],\n",
      "        [440.],\n",
      "        [185.],\n",
      "        [120.],\n",
      "        [425.],\n",
      "        [260.],\n",
      "        [340.],\n",
      "        [440.],\n",
      "        [290.],\n",
      "        [340.],\n",
      "        [370.],\n",
      "        [ 20.],\n",
      "        [110.],\n",
      "        [415.],\n",
      "        [195.],\n",
      "        [405.],\n",
      "        [110.],\n",
      "        [185.],\n",
      "        [410.],\n",
      "        [290.],\n",
      "        [425.],\n",
      "        [185.],\n",
      "        [190.],\n",
      "        [ 95.],\n",
      "        [460.],\n",
      "        [295.],\n",
      "        [165.],\n",
      "        [270.],\n",
      "        [195.],\n",
      "        [410.],\n",
      "        [280.],\n",
      "        [310.],\n",
      "        [335.],\n",
      "        [495.],\n",
      "        [490.],\n",
      "        [210.]])\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "trainingNN(layer_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7bb3487d-456a-46b3-9880-767dcb552871",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
