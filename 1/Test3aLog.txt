{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7e454c78-7f1a-410f-abc3-fe26fc1d6bf1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Please insert the size of input (Layer 0) : 3\n",
      "Please insert the size of output (Layer 0) : 4\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "A priori conditions:\n",
      "------------------------------\n",
      "The output from linear model is correct\n",
      "------------------------------\n",
      "The output from ReLU is correct\n",
      "------------------------------\n",
      "The output from convex combination is correct\n",
      "\n",
      "Model parameters:\n",
      "------------------------------\n",
      "The x (data):  tensor([0.0290, 0.4019, 0.2598])\n",
      "------------------------------\n",
      "The w (weight):  tensor([[-0.1540, -0.5100,  0.2317],\n",
      "        [-0.5175, -0.0368,  0.2007],\n",
      "        [-0.1946,  0.3276,  0.0728],\n",
      "        [ 0.3174,  0.3704, -0.2549]])\n",
      "------------------------------\n",
      "The b (bias):  tensor([ 0.2098, -0.2498,  0.1810, -0.3017])\n",
      "\n",
      "First level output:\n",
      "------------------------------\n",
      "The y_1 (output from lin. model): tensor([ 0.0606, -0.2274,  0.3259, -0.2098])\n",
      "\n",
      "Second level output:\n",
      "------------------------------\n",
      "The y_2 (output from ReLU): tensor([0.0606, 0.0000, 0.3259, 0.0000])\n",
      "\n",
      "Third level output:\n",
      "------------------------------\n",
      "The y_3 (output from convex combination): tensor([0.2879, 0.3000, 0.2348, 0.3000])\n",
      "\n",
      "----------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "My Neural Network is: input -> Layer 0 ->  output\n",
      "\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Do you want to add a new Layer? (type y (yes) or n (no)?) y\n",
      "Please insert the size of input (Layer 1) : 4\n",
      "Please insert the size of output (Layer 1) : 3\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "A priori conditions:\n",
      "------------------------------\n",
      "The output from linear model is correct\n",
      "------------------------------\n",
      "The output from ReLU is correct\n",
      "------------------------------\n",
      "The output from convex combination is correct\n",
      "\n",
      "Model parameters:\n",
      "------------------------------\n",
      "The x (data):  tensor([0.2879, 0.3000, 0.2348, 0.3000])\n",
      "------------------------------\n",
      "The w (weight):  tensor([[ 0.2313,  0.1012, -0.1957, -0.2452],\n",
      "        [ 0.1294,  0.4665,  0.2399, -0.0483],\n",
      "        [-0.0243,  0.2842, -0.3475,  0.1662]])\n",
      "------------------------------\n",
      "The b (bias):  tensor([-0.1657,  0.2893, -0.1784])\n",
      "\n",
      "First level output:\n",
      "------------------------------\n",
      "The y_1 (output from lin. model): tensor([-0.1882,  0.5083, -0.1318])\n",
      "\n",
      "Second level output:\n",
      "------------------------------\n",
      "The y_2 (output from ReLU): tensor([0.0000, 0.5083, 0.0000])\n",
      "\n",
      "Third level output:\n",
      "------------------------------\n",
      "The y_3 (output from convex combination): tensor([0.3000, 0.1983, 0.3000])\n",
      "\n",
      "----------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "My Neural Network is: input -> Layer 0 -> Layer 1 ->  output\n",
      "\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Do you want to add a new Layer? (type y (yes) or n (no)?) n\n"
     ]
    }
   ],
   "source": [
    "run main.py"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "22c4c136-734c-48d1-ac9a-477f9b44554b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The U is: tensor([[2., 5., 8.],\n",
      "        [6., 6., 7.],\n",
      "        [1., 5., 2.],\n",
      "        ...,\n",
      "        [2., 1., 7.],\n",
      "        [5., 1., 4.],\n",
      "        [2., 1., 1.]])\n",
      "\n",
      "Each output is calculated in maximum 3 steps as follows:\n",
      "\n",
      "y0 = Ax + B\n",
      "\n",
      "y1 = ReLU(y0)\n",
      "\n",
      "y2 = (1 - y1)*f(x) + y1*g(x)\n",
      "\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "What output do you want to take for the tuning of parameters (type 0 (y0) or 1 (y1) or 2 (y2))?\n",
      " 0\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "The error (every 250 steps):\n",
      "tensor(130.9292, grad_fn=<MseLossBackward0>)\n",
      "tensor(118.3359, grad_fn=<MseLossBackward0>)\n",
      "tensor(108.7010, grad_fn=<MseLossBackward0>)\n",
      "tensor(99.3512, grad_fn=<MseLossBackward0>)\n",
      "tensor(88.6565, grad_fn=<MseLossBackward0>)\n",
      "tensor(75.7434, grad_fn=<MseLossBackward0>)\n",
      "tensor(60.7224, grad_fn=<MseLossBackward0>)\n",
      "tensor(44.9242, grad_fn=<MseLossBackward0>)\n",
      "tensor(30.5164, grad_fn=<MseLossBackward0>)\n",
      "tensor(19.3606, grad_fn=<MseLossBackward0>)\n",
      "tensor(12.0160, grad_fn=<MseLossBackward0>)\n",
      "tensor(7.8099, grad_fn=<MseLossBackward0>)\n",
      "tensor(5.6323, grad_fn=<MseLossBackward0>)\n",
      "tensor(4.5616, grad_fn=<MseLossBackward0>)\n",
      "tensor(4.0315, grad_fn=<MseLossBackward0>)\n",
      "tensor(3.7498, grad_fn=<MseLossBackward0>)\n",
      "tensor(3.5799, grad_fn=<MseLossBackward0>)\n",
      "tensor(3.4614, grad_fn=<MseLossBackward0>)\n",
      "tensor(3.3679, grad_fn=<MseLossBackward0>)\n",
      "tensor(3.2880, grad_fn=<MseLossBackward0>)\n",
      "tensor(3.2161, grad_fn=<MseLossBackward0>)\n",
      "tensor(3.1498, grad_fn=<MseLossBackward0>)\n",
      "tensor(3.0877, grad_fn=<MseLossBackward0>)\n",
      "tensor(3.0289, grad_fn=<MseLossBackward0>)\n",
      "tensor(2.9729, grad_fn=<MseLossBackward0>)\n",
      "tensor(2.9195, grad_fn=<MseLossBackward0>)\n",
      "tensor(2.8684, grad_fn=<MseLossBackward0>)\n",
      "tensor(2.8193, grad_fn=<MseLossBackward0>)\n",
      "tensor(2.7721, grad_fn=<MseLossBackward0>)\n",
      "tensor(2.7267, grad_fn=<MseLossBackward0>)\n",
      "tensor(2.6830, grad_fn=<MseLossBackward0>)\n",
      "tensor(2.6408, grad_fn=<MseLossBackward0>)\n",
      "tensor(2.6000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2.5606, grad_fn=<MseLossBackward0>)\n",
      "tensor(2.5224, grad_fn=<MseLossBackward0>)\n",
      "tensor(2.4855, grad_fn=<MseLossBackward0>)\n",
      "tensor(2.4496, grad_fn=<MseLossBackward0>)\n",
      "tensor(2.4148, grad_fn=<MseLossBackward0>)\n",
      "tensor(2.3810, grad_fn=<MseLossBackward0>)\n",
      "tensor(2.3481, grad_fn=<MseLossBackward0>)\n",
      "tensor(2.3161, grad_fn=<MseLossBackward0>)\n",
      "tensor(2.2849, grad_fn=<MseLossBackward0>)\n",
      "tensor(2.2545, grad_fn=<MseLossBackward0>)\n",
      "tensor(2.2248, grad_fn=<MseLossBackward0>)\n",
      "tensor(2.1958, grad_fn=<MseLossBackward0>)\n",
      "tensor(2.1674, grad_fn=<MseLossBackward0>)\n",
      "tensor(2.1397, grad_fn=<MseLossBackward0>)\n",
      "tensor(2.1125, grad_fn=<MseLossBackward0>)\n",
      "tensor(2.0858, grad_fn=<MseLossBackward0>)\n",
      "tensor(2.0596, grad_fn=<MseLossBackward0>)\n",
      "tensor(2.0339, grad_fn=<MseLossBackward0>)\n",
      "tensor(2.0087, grad_fn=<MseLossBackward0>)\n",
      "tensor(1.9838, grad_fn=<MseLossBackward0>)\n",
      "tensor(1.9594, grad_fn=<MseLossBackward0>)\n",
      "tensor(1.9353, grad_fn=<MseLossBackward0>)\n",
      "tensor(1.9116, grad_fn=<MseLossBackward0>)\n",
      "tensor(1.8882, grad_fn=<MseLossBackward0>)\n",
      "tensor(1.8651, grad_fn=<MseLossBackward0>)\n",
      "tensor(1.8422, grad_fn=<MseLossBackward0>)\n",
      "tensor(1.8197, grad_fn=<MseLossBackward0>)\n",
      "tensor(1.7974, grad_fn=<MseLossBackward0>)\n",
      "tensor(1.7754, grad_fn=<MseLossBackward0>)\n",
      "tensor(1.7535, grad_fn=<MseLossBackward0>)\n",
      "tensor(1.7319, grad_fn=<MseLossBackward0>)\n",
      "tensor(1.7105, grad_fn=<MseLossBackward0>)\n",
      "tensor(1.6893, grad_fn=<MseLossBackward0>)\n",
      "tensor(1.6683, grad_fn=<MseLossBackward0>)\n",
      "tensor(1.6474, grad_fn=<MseLossBackward0>)\n",
      "tensor(1.6267, grad_fn=<MseLossBackward0>)\n",
      "tensor(1.6061, grad_fn=<MseLossBackward0>)\n",
      "tensor(1.5857, grad_fn=<MseLossBackward0>)\n",
      "tensor(1.5654, grad_fn=<MseLossBackward0>)\n",
      "tensor(1.5452, grad_fn=<MseLossBackward0>)\n",
      "tensor(1.5252, grad_fn=<MseLossBackward0>)\n",
      "tensor(1.5052, grad_fn=<MseLossBackward0>)\n",
      "tensor(1.4854, grad_fn=<MseLossBackward0>)\n",
      "tensor(1.4657, grad_fn=<MseLossBackward0>)\n",
      "tensor(1.4461, grad_fn=<MseLossBackward0>)\n",
      "tensor(1.4266, grad_fn=<MseLossBackward0>)\n",
      "tensor(1.4072, grad_fn=<MseLossBackward0>)\n",
      "\n",
      "The output of the NN (post tuning) is:\n",
      " tensor([[ 3.9441,  8.7062, 13.3860],\n",
      "        [ 6.4195, 12.4300, 18.6734],\n",
      "        [ 1.8832,  6.1606,  7.5810],\n",
      "        ...,\n",
      "        [ 2.9014,  4.7054,  8.4979],\n",
      "        [ 4.0700,  6.1387,  9.9823],\n",
      "        [ 1.4689,  2.9329,  3.9463]], grad_fn=<AddmmBackward0>) \n",
      " The target output (from measurements) is:\n",
      " tensor([[ 2.,  7., 15.],\n",
      "        [ 6., 12., 19.],\n",
      "        [ 1.,  6.,  8.],\n",
      "        ...,\n",
      "        [ 2.,  3., 10.],\n",
      "        [ 5.,  6., 10.],\n",
      "        [ 2.,  3.,  4.]])\n"
     ]
    }
   ],
   "source": [
    "trainingNN(layer_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ad2dd64a-5e7d-4d19-b18e-64f3480ba9ba",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
