{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9af40bfc-4a7b-45ae-8c23-4d2e0c4aec22",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Please insert the size of input (Layer 0) : 3\n",
      "Please insert the size of output (Layer 0) : 4\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "A priori conditions:\n",
      "------------------------------\n",
      "The output from linear model is correct\n",
      "------------------------------\n",
      "The output from ReLU is correct\n",
      "------------------------------\n",
      "The output from convex combination is correct\n",
      "\n",
      "Model parameters:\n",
      "------------------------------\n",
      "The x (data):  tensor([0.0290, 0.4019, 0.2598])\n",
      "------------------------------\n",
      "The w (weight):  tensor([[-0.1540, -0.5100,  0.2317],\n",
      "        [-0.5175, -0.0368,  0.2007],\n",
      "        [-0.1946,  0.3276,  0.0728],\n",
      "        [ 0.3174,  0.3704, -0.2549]])\n",
      "------------------------------\n",
      "The b (bias):  tensor([ 0.2098, -0.2498,  0.1810, -0.3017])\n",
      "\n",
      "First level output:\n",
      "------------------------------\n",
      "The y_1 (output from lin. model): tensor([ 0.0606, -0.2274,  0.3259, -0.2098])\n",
      "\n",
      "Second level output:\n",
      "------------------------------\n",
      "The y_2 (output from ReLU): tensor([0.0606, 0.0000, 0.3259, 0.0000])\n",
      "\n",
      "Third level output:\n",
      "------------------------------\n",
      "The y_3 (output from convex combination): tensor([0.2879, 0.3000, 0.2348, 0.3000])\n",
      "\n",
      "----------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "My Neural Network is: input -> Layer 0 ->  output\n",
      "\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Do you want to add a new Layer? (type y (yes) or n (no)?) y\n",
      "Please insert the size of input (Layer 1) : 4\n",
      "Please insert the size of output (Layer 1) : 3\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "A priori conditions:\n",
      "------------------------------\n",
      "The output from linear model is correct\n",
      "------------------------------\n",
      "The output from ReLU is correct\n",
      "------------------------------\n",
      "The output from convex combination is correct\n",
      "\n",
      "Model parameters:\n",
      "------------------------------\n",
      "The x (data):  tensor([0.2879, 0.3000, 0.2348, 0.3000])\n",
      "------------------------------\n",
      "The w (weight):  tensor([[ 0.2313,  0.1012, -0.1957, -0.2452],\n",
      "        [ 0.1294,  0.4665,  0.2399, -0.0483],\n",
      "        [-0.0243,  0.2842, -0.3475,  0.1662]])\n",
      "------------------------------\n",
      "The b (bias):  tensor([-0.1657,  0.2893, -0.1784])\n",
      "\n",
      "First level output:\n",
      "------------------------------\n",
      "The y_1 (output from lin. model): tensor([-0.1882,  0.5083, -0.1318])\n",
      "\n",
      "Second level output:\n",
      "------------------------------\n",
      "The y_2 (output from ReLU): tensor([0.0000, 0.5083, 0.0000])\n",
      "\n",
      "Third level output:\n",
      "------------------------------\n",
      "The y_3 (output from convex combination): tensor([0.3000, 0.1983, 0.3000])\n",
      "\n",
      "----------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "My Neural Network is: input -> Layer 0 -> Layer 1 ->  output\n",
      "\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Do you want to add a new Layer? (type y (yes) or n (no)?) n\n"
     ]
    }
   ],
   "source": [
    "run main.py"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9787c99e-4841-4656-ad81-3c3b6fbe4915",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The U is: tensor([[2., 5., 8.],\n",
      "        [6., 6., 7.],\n",
      "        [1., 5., 2.],\n",
      "        ...,\n",
      "        [2., 1., 7.],\n",
      "        [5., 1., 4.],\n",
      "        [2., 1., 1.]])\n",
      "\n",
      "Each output is calculated in maximum 3 steps as follows:\n",
      "\n",
      "y0 = Ax + B\n",
      "\n",
      "y1 = ReLU(y0)\n",
      "\n",
      "y2 = (1 - y1)*f(x) + y1*g(x)\n",
      "\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "What output do you want to take for the tuning of parameters (type 0 (y0) or 1 (y1) or 2 (y2))?\n",
      " 1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "The error (every 250 steps):\n",
      "tensor(0.5443, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.5422, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.5401, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.5381, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.5361, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.5343, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.5324, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.5307, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.5290, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.5274, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.5258, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.5243, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.5228, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.5214, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.5200, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.5188, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.5175, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.5163, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.5152, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.5141, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.5130, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.5120, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.5110, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.5100, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.5091, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.5082, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.5074, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.5066, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.5058, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.5050, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.5043, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.5036, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.5029, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.5022, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.5016, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.5010, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.5004, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.4998, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.4992, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.4986, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.4981, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.4975, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.4970, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.4965, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.4960, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.4956, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.4951, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.4947, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.4943, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.4939, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.4935, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.4931, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.4927, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.4923, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.4920, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.4916, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.4913, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.4909, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.4906, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.4903, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.4900, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.4897, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.4894, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.4891, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.4888, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.4885, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.4883, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.4880, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.4877, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.4875, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.4872, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.4870, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.4867, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.4865, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.4863, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.4861, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.4859, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.4856, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.4854, grad_fn=<MseLossBackward0>)\n",
      "tensor(0.4852, grad_fn=<MseLossBackward0>)\n",
      "\n",
      "The output of the NN (post tuning) is:\n",
      " tensor([[0.0000, 0.5143, 0.0000],\n",
      "        [0.0000, 0.2509, 0.0000],\n",
      "        [0.0000, 0.4303, 0.0000],\n",
      "        ...,\n",
      "        [0.0243, 0.4307, 0.0000],\n",
      "        [0.0000, 0.2044, 0.0000],\n",
      "        [0.0000, 0.2326, 0.0000]], grad_fn=<ReluBackward0>) \n",
      " The target output (from measurements) is:\n",
      " tensor([[ 0.9093, -0.9589,  0.9894],\n",
      "        [-0.2794, -0.2794,  0.6570],\n",
      "        [ 0.8415, -0.9589,  0.9093],\n",
      "        ...,\n",
      "        [ 0.9093,  0.8415,  0.6570],\n",
      "        [-0.9589,  0.8415, -0.7568],\n",
      "        [ 0.9093,  0.8415,  0.8415]])\n"
     ]
    }
   ],
   "source": [
    "trainingNN(layer_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d3eb5506-2387-4465-b273-407f45399689",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
