{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2c727919-d130-402a-a234-35bdf4aea76b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Please insert the size of input (Layer 0) : 1\n",
      "Please insert the size of output (Layer 0) : 4\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "A priori conditions:\n",
      "------------------------------\n",
      "The output from linear model is correct\n",
      "------------------------------\n",
      "The output from ReLU is correct\n",
      "------------------------------\n",
      "The output from convex combination is correct\n",
      "\n",
      "Model parameters:\n",
      "------------------------------\n",
      "The x (data):  tensor([0.0290])\n",
      "------------------------------\n",
      "The w (weight):  tensor([[-0.1962],\n",
      "        [-0.4803],\n",
      "        [-0.2667],\n",
      "        [-0.8834]])\n",
      "------------------------------\n",
      "The b (bias):  tensor([ 0.4013, -0.8964, -0.0637,  0.3476])\n",
      "\n",
      "First level output:\n",
      "------------------------------\n",
      "The y_1 (output from lin. model): tensor([ 0.3956, -0.9103, -0.0715,  0.3220])\n",
      "\n",
      "Second level output:\n",
      "------------------------------\n",
      "The y_2 (output from ReLU): tensor([0.3956, 0.0000, 0.0000, 0.3220])\n",
      "\n",
      "Third level output:\n",
      "------------------------------\n",
      "The y_3 (output from convex combination): tensor([0.2209, 0.3000, 0.3000, 0.2356])\n",
      "\n",
      "----------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "My Neural Network is: input -> Layer 0 ->  output\n",
      "\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Do you want to add a new Layer? (type y (yes) or n (no)?) y\n",
      "Please insert the size of input (Layer 1) : 4\n",
      "Please insert the size of output (Layer 1) : 1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "A priori conditions:\n",
      "------------------------------\n",
      "The output from linear model is correct\n",
      "------------------------------\n",
      "The output from ReLU is correct\n",
      "------------------------------\n",
      "The output from convex combination is correct\n",
      "\n",
      "Model parameters:\n",
      "------------------------------\n",
      "The x (data):  tensor([0.2209, 0.3000, 0.3000, 0.2356])\n",
      "------------------------------\n",
      "The w (weight):  tensor([[-0.1685,  0.2837,  0.0631,  0.2749]])\n",
      "------------------------------\n",
      "The b (bias):  tensor([0.3208])\n",
      "\n",
      "First level output:\n",
      "------------------------------\n",
      "The y_1 (output from lin. model): tensor([0.4524])\n",
      "\n",
      "Second level output:\n",
      "------------------------------\n",
      "The y_2 (output from ReLU): tensor([0.4524])\n",
      "\n",
      "Third level output:\n",
      "------------------------------\n",
      "The y_3 (output from convex combination): tensor([0.2095])\n",
      "\n",
      "----------------------------------------------------------------------------------------------------------------------\n",
      "\n",
      "My Neural Network is: input -> Layer 0 -> Layer 1 ->  output\n",
      "\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Do you want to add a new Layer? (type y (yes) or n (no)?) n\n"
     ]
    }
   ],
   "source": [
    "run main.py"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d36e4d3a-56ff-4292-82c2-e9acfc4180fc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The U is: tensor([[3.],\n",
      "        [2.],\n",
      "        [6.],\n",
      "        [8.],\n",
      "        [2.],\n",
      "        [2.],\n",
      "        [8.],\n",
      "        [2.],\n",
      "        [0.],\n",
      "        [4.],\n",
      "        [9.],\n",
      "        [2.],\n",
      "        [1.],\n",
      "        [9.],\n",
      "        [2.],\n",
      "        [2.],\n",
      "        [9.],\n",
      "        [4.],\n",
      "        [4.],\n",
      "        [7.],\n",
      "        [2.],\n",
      "        [5.],\n",
      "        [8.],\n",
      "        [6.],\n",
      "        [6.],\n",
      "        [7.],\n",
      "        [1.],\n",
      "        [5.],\n",
      "        [2.],\n",
      "        [1.],\n",
      "        [7.],\n",
      "        [4.],\n",
      "        [3.],\n",
      "        [0.],\n",
      "        [7.],\n",
      "        [6.],\n",
      "        [9.],\n",
      "        [3.],\n",
      "        [3.],\n",
      "        [9.],\n",
      "        [0.],\n",
      "        [1.],\n",
      "        [2.],\n",
      "        [9.],\n",
      "        [7.],\n",
      "        [8.],\n",
      "        [6.],\n",
      "        [3.],\n",
      "        [4.],\n",
      "        [8.],\n",
      "        [5.],\n",
      "        [1.],\n",
      "        [5.],\n",
      "        [6.],\n",
      "        [4.],\n",
      "        [2.],\n",
      "        [9.],\n",
      "        [3.],\n",
      "        [5.],\n",
      "        [9.],\n",
      "        [7.],\n",
      "        [9.],\n",
      "        [9.],\n",
      "        [4.],\n",
      "        [9.],\n",
      "        [8.],\n",
      "        [7.],\n",
      "        [4.],\n",
      "        [5.],\n",
      "        [2.],\n",
      "        [8.],\n",
      "        [8.],\n",
      "        [8.],\n",
      "        [8.],\n",
      "        [4.],\n",
      "        [4.],\n",
      "        [2.],\n",
      "        [3.],\n",
      "        [9.],\n",
      "        [1.],\n",
      "        [2.],\n",
      "        [7.],\n",
      "        [2.],\n",
      "        [8.],\n",
      "        [5.],\n",
      "        [7.],\n",
      "        [8.],\n",
      "        [9.],\n",
      "        [2.],\n",
      "        [9.],\n",
      "        [3.],\n",
      "        [4.],\n",
      "        [9.],\n",
      "        [2.],\n",
      "        [6.],\n",
      "        [2.],\n",
      "        [7.],\n",
      "        [9.],\n",
      "        [8.],\n",
      "        [2.]])\n",
      "\n",
      "Each output is calculated in maximum 3 steps as follows:\n",
      "\n",
      "y0 = Ax + B\n",
      "\n",
      "y1 = ReLU(y0)\n",
      "\n",
      "y2 = (1 - y1)*f(x) + y1*g(x)\n",
      "\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "What output do you want to take for the tuning of parameters (type 0 (y0) or 1 (y1) or 2 (y2))?\n",
      " 1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "The error (every 250 steps):\n",
      "tensor(11793174., grad_fn=<MseLossBackward0>)\n",
      "tensor(11759442., grad_fn=<MseLossBackward0>)\n",
      "tensor(11726047., grad_fn=<MseLossBackward0>)\n",
      "tensor(11692983., grad_fn=<MseLossBackward0>)\n",
      "tensor(11660250., grad_fn=<MseLossBackward0>)\n",
      "tensor(11627839., grad_fn=<MseLossBackward0>)\n",
      "tensor(11595752., grad_fn=<MseLossBackward0>)\n",
      "tensor(11563983., grad_fn=<MseLossBackward0>)\n",
      "tensor(11532531., grad_fn=<MseLossBackward0>)\n",
      "tensor(11501390., grad_fn=<MseLossBackward0>)\n",
      "tensor(11470559., grad_fn=<MseLossBackward0>)\n",
      "tensor(11440033., grad_fn=<MseLossBackward0>)\n",
      "tensor(11409810., grad_fn=<MseLossBackward0>)\n",
      "tensor(11379886., grad_fn=<MseLossBackward0>)\n",
      "tensor(11350253., grad_fn=<MseLossBackward0>)\n",
      "tensor(11320908., grad_fn=<MseLossBackward0>)\n",
      "tensor(11291845., grad_fn=<MseLossBackward0>)\n",
      "tensor(11263053., grad_fn=<MseLossBackward0>)\n",
      "tensor(11234516., grad_fn=<MseLossBackward0>)\n",
      "tensor(11206207., grad_fn=<MseLossBackward0>)\n",
      "tensor(11178092., grad_fn=<MseLossBackward0>)\n",
      "tensor(11150090., grad_fn=<MseLossBackward0>)\n",
      "tensor(11122103., grad_fn=<MseLossBackward0>)\n",
      "tensor(11093917., grad_fn=<MseLossBackward0>)\n",
      "tensor(11065268., grad_fn=<MseLossBackward0>)\n",
      "tensor(11035753., grad_fn=<MseLossBackward0>)\n",
      "tensor(11005469., grad_fn=<MseLossBackward0>)\n",
      "tensor(10974518., grad_fn=<MseLossBackward0>)\n",
      "tensor(10943593., grad_fn=<MseLossBackward0>)\n",
      "tensor(10913485., grad_fn=<MseLossBackward0>)\n",
      "tensor(10884174., grad_fn=<MseLossBackward0>)\n",
      "tensor(10855145., grad_fn=<MseLossBackward0>)\n",
      "tensor(10826409., grad_fn=<MseLossBackward0>)\n",
      "tensor(10797861., grad_fn=<MseLossBackward0>)\n",
      "tensor(10769490., grad_fn=<MseLossBackward0>)\n",
      "tensor(10741274., grad_fn=<MseLossBackward0>)\n",
      "tensor(10713181., grad_fn=<MseLossBackward0>)\n",
      "tensor(10685184., grad_fn=<MseLossBackward0>)\n",
      "tensor(10657299., grad_fn=<MseLossBackward0>)\n",
      "tensor(10629527., grad_fn=<MseLossBackward0>)\n",
      "tensor(10601868., grad_fn=<MseLossBackward0>)\n",
      "tensor(10574320., grad_fn=<MseLossBackward0>)\n",
      "tensor(10546883., grad_fn=<MseLossBackward0>)\n",
      "tensor(10519558., grad_fn=<MseLossBackward0>)\n",
      "tensor(10492346., grad_fn=<MseLossBackward0>)\n",
      "tensor(10465244., grad_fn=<MseLossBackward0>)\n",
      "tensor(10438308., grad_fn=<MseLossBackward0>)\n",
      "tensor(10411674., grad_fn=<MseLossBackward0>)\n",
      "tensor(10384676., grad_fn=<MseLossBackward0>)\n",
      "tensor(10358398., grad_fn=<MseLossBackward0>)\n",
      "tensor(10331817., grad_fn=<MseLossBackward0>)\n",
      "tensor(10305187., grad_fn=<MseLossBackward0>)\n",
      "tensor(10278780., grad_fn=<MseLossBackward0>)\n",
      "tensor(10252591., grad_fn=<MseLossBackward0>)\n",
      "tensor(10226467., grad_fn=<MseLossBackward0>)\n",
      "tensor(10200426., grad_fn=<MseLossBackward0>)\n",
      "tensor(10174598., grad_fn=<MseLossBackward0>)\n",
      "tensor(10149053., grad_fn=<MseLossBackward0>)\n",
      "tensor(10123140., grad_fn=<MseLossBackward0>)\n",
      "tensor(10097640., grad_fn=<MseLossBackward0>)\n",
      "tensor(10072163., grad_fn=<MseLossBackward0>)\n",
      "tensor(10046731., grad_fn=<MseLossBackward0>)\n",
      "tensor(10021360., grad_fn=<MseLossBackward0>)\n",
      "tensor(9996516., grad_fn=<MseLossBackward0>)\n",
      "tensor(9971765., grad_fn=<MseLossBackward0>)\n",
      "tensor(9946646., grad_fn=<MseLossBackward0>)\n",
      "tensor(9921277., grad_fn=<MseLossBackward0>)\n",
      "tensor(9896634., grad_fn=<MseLossBackward0>)\n",
      "tensor(9871972., grad_fn=<MseLossBackward0>)\n",
      "tensor(9847348., grad_fn=<MseLossBackward0>)\n",
      "tensor(9823023., grad_fn=<MseLossBackward0>)\n",
      "tensor(9798872., grad_fn=<MseLossBackward0>)\n",
      "tensor(9774349., grad_fn=<MseLossBackward0>)\n",
      "tensor(9750314., grad_fn=<MseLossBackward0>)\n",
      "tensor(9726607., grad_fn=<MseLossBackward0>)\n",
      "tensor(9702175., grad_fn=<MseLossBackward0>)\n",
      "tensor(9678480., grad_fn=<MseLossBackward0>)\n",
      "tensor(9655062., grad_fn=<MseLossBackward0>)\n",
      "tensor(9631213., grad_fn=<MseLossBackward0>)\n",
      "tensor(9607891., grad_fn=<MseLossBackward0>)\n",
      "tensor(9584141., grad_fn=<MseLossBackward0>)\n",
      "tensor(9560623., grad_fn=<MseLossBackward0>)\n",
      "tensor(9537536., grad_fn=<MseLossBackward0>)\n",
      "tensor(9514362., grad_fn=<MseLossBackward0>)\n",
      "tensor(9491270., grad_fn=<MseLossBackward0>)\n",
      "tensor(9468259., grad_fn=<MseLossBackward0>)\n",
      "tensor(9445332., grad_fn=<MseLossBackward0>)\n",
      "tensor(9422385., grad_fn=<MseLossBackward0>)\n",
      "tensor(9399875., grad_fn=<MseLossBackward0>)\n",
      "tensor(9378049., grad_fn=<MseLossBackward0>)\n",
      "tensor(9354650., grad_fn=<MseLossBackward0>)\n",
      "tensor(9332741., grad_fn=<MseLossBackward0>)\n",
      "tensor(9309985., grad_fn=<MseLossBackward0>)\n",
      "tensor(9288316., grad_fn=<MseLossBackward0>)\n",
      "tensor(9265443., grad_fn=<MseLossBackward0>)\n",
      "tensor(9243118., grad_fn=<MseLossBackward0>)\n",
      "tensor(9221752., grad_fn=<MseLossBackward0>)\n",
      "tensor(9199174., grad_fn=<MseLossBackward0>)\n",
      "tensor(9176965., grad_fn=<MseLossBackward0>)\n",
      "tensor(9155966., grad_fn=<MseLossBackward0>)\n",
      "tensor(9133679., grad_fn=<MseLossBackward0>)\n",
      "tensor(9111704., grad_fn=<MseLossBackward0>)\n",
      "tensor(9090950., grad_fn=<MseLossBackward0>)\n",
      "tensor(9068959., grad_fn=<MseLossBackward0>)\n",
      "tensor(9047320., grad_fn=<MseLossBackward0>)\n",
      "tensor(9026683., grad_fn=<MseLossBackward0>)\n",
      "tensor(9004977., grad_fn=<MseLossBackward0>)\n",
      "tensor(8983768., grad_fn=<MseLossBackward0>)\n",
      "tensor(8963158., grad_fn=<MseLossBackward0>)\n",
      "tensor(8941729., grad_fn=<MseLossBackward0>)\n",
      "tensor(8921014., grad_fn=<MseLossBackward0>)\n",
      "tensor(8900346., grad_fn=<MseLossBackward0>)\n",
      "tensor(8879187., grad_fn=<MseLossBackward0>)\n",
      "tensor(8858876., grad_fn=<MseLossBackward0>)\n",
      "tensor(8837948., grad_fn=<MseLossBackward0>)\n",
      "tensor(8817526., grad_fn=<MseLossBackward0>)\n",
      "tensor(8797509., grad_fn=<MseLossBackward0>)\n",
      "tensor(8776746., grad_fn=<MseLossBackward0>)\n",
      "tensor(8756553., grad_fn=<MseLossBackward0>)\n",
      "tensor(8736438., grad_fn=<MseLossBackward0>)\n",
      "tensor(8716406., grad_fn=<MseLossBackward0>)\n",
      "tensor(8696448., grad_fn=<MseLossBackward0>)\n",
      "tensor(8676559., grad_fn=<MseLossBackward0>)\n",
      "tensor(8656744., grad_fn=<MseLossBackward0>)\n",
      "tensor(8637001., grad_fn=<MseLossBackward0>)\n",
      "tensor(8617179., grad_fn=<MseLossBackward0>)\n",
      "tensor(8597606., grad_fn=<MseLossBackward0>)\n",
      "tensor(8577928., grad_fn=<MseLossBackward0>)\n",
      "tensor(8558447., grad_fn=<MseLossBackward0>)\n",
      "tensor(8539080., grad_fn=<MseLossBackward0>)\n",
      "tensor(8519776., grad_fn=<MseLossBackward0>)\n",
      "tensor(8500534., grad_fn=<MseLossBackward0>)\n",
      "tensor(8481331., grad_fn=<MseLossBackward0>)\n",
      "tensor(8462243., grad_fn=<MseLossBackward0>)\n",
      "tensor(8443187., grad_fn=<MseLossBackward0>)\n",
      "tensor(8424161., grad_fn=<MseLossBackward0>)\n",
      "tensor(8405242., grad_fn=<MseLossBackward0>)\n",
      "tensor(8386361.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(8367509., grad_fn=<MseLossBackward0>)\n",
      "tensor(8348750., grad_fn=<MseLossBackward0>)\n",
      "tensor(8330040.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(8311357.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(8292756., grad_fn=<MseLossBackward0>)\n",
      "tensor(8274212., grad_fn=<MseLossBackward0>)\n",
      "tensor(8255694., grad_fn=<MseLossBackward0>)\n",
      "tensor(8237248.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(8218869., grad_fn=<MseLossBackward0>)\n",
      "tensor(8200514.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(8182222., grad_fn=<MseLossBackward0>)\n",
      "tensor(8164005., grad_fn=<MseLossBackward0>)\n",
      "tensor(8145815., grad_fn=<MseLossBackward0>)\n",
      "tensor(8127673.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(8109618.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(8091589., grad_fn=<MseLossBackward0>)\n",
      "tensor(8073595., grad_fn=<MseLossBackward0>)\n",
      "tensor(8055700., grad_fn=<MseLossBackward0>)\n",
      "tensor(8037831., grad_fn=<MseLossBackward0>)\n",
      "tensor(8019988., grad_fn=<MseLossBackward0>)\n",
      "tensor(8002249., grad_fn=<MseLossBackward0>)\n",
      "tensor(7984539., grad_fn=<MseLossBackward0>)\n",
      "tensor(7966854.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(7949259.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(7931707.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(7914181., grad_fn=<MseLossBackward0>)\n",
      "tensor(7896728.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(7879332.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(7861963., grad_fn=<MseLossBackward0>)\n",
      "tensor(7844651., grad_fn=<MseLossBackward0>)\n",
      "tensor(7827410., grad_fn=<MseLossBackward0>)\n",
      "tensor(7810196.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(7793021.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(7775938., grad_fn=<MseLossBackward0>)\n",
      "tensor(7758876., grad_fn=<MseLossBackward0>)\n",
      "tensor(7741842., grad_fn=<MseLossBackward0>)\n",
      "tensor(7724908., grad_fn=<MseLossBackward0>)\n",
      "tensor(7708002.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(7691118.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(7674320., grad_fn=<MseLossBackward0>)\n",
      "tensor(7657565.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(7640834.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(7624167.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(7607565., grad_fn=<MseLossBackward0>)\n",
      "tensor(7590985., grad_fn=<MseLossBackward0>)\n",
      "tensor(7574447.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(7557995., grad_fn=<MseLossBackward0>)\n",
      "tensor(7541565.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(7525160.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(7508853., grad_fn=<MseLossBackward0>)\n",
      "tensor(7492572., grad_fn=<MseLossBackward0>)\n",
      "tensor(7476315.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(7460133., grad_fn=<MseLossBackward0>)\n",
      "tensor(7444001.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(7427893., grad_fn=<MseLossBackward0>)\n",
      "tensor(7411833., grad_fn=<MseLossBackward0>)\n",
      "tensor(7395849., grad_fn=<MseLossBackward0>)\n",
      "tensor(7379886.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(7363949., grad_fn=<MseLossBackward0>)\n",
      "tensor(7348110., grad_fn=<MseLossBackward0>)\n",
      "tensor(7332295., grad_fn=<MseLossBackward0>)\n",
      "tensor(7316502.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(7300781.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(7285112.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(7269464.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(7253861., grad_fn=<MseLossBackward0>)\n",
      "tensor(7238334.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(7222832., grad_fn=<MseLossBackward0>)\n",
      "tensor(7207398., grad_fn=<MseLossBackward0>)\n",
      "tensor(7192052., grad_fn=<MseLossBackward0>)\n",
      "tensor(7176761.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(7161499., grad_fn=<MseLossBackward0>)\n",
      "tensor(7146278., grad_fn=<MseLossBackward0>)\n",
      "tensor(7131155., grad_fn=<MseLossBackward0>)\n",
      "tensor(7116084.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(7101035.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(7086053., grad_fn=<MseLossBackward0>)\n",
      "tensor(7071145., grad_fn=<MseLossBackward0>)\n",
      "tensor(7056261., grad_fn=<MseLossBackward0>)\n",
      "tensor(7041403.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(7026675., grad_fn=<MseLossBackward0>)\n",
      "tensor(7011940., grad_fn=<MseLossBackward0>)\n",
      "tensor(6997259., grad_fn=<MseLossBackward0>)\n",
      "tensor(6982648.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(6968099., grad_fn=<MseLossBackward0>)\n",
      "tensor(6953586.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(6938813.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(6924098., grad_fn=<MseLossBackward0>)\n",
      "tensor(6909464.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(6894886.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(6880379., grad_fn=<MseLossBackward0>)\n",
      "tensor(6865894., grad_fn=<MseLossBackward0>)\n",
      "tensor(6851435., grad_fn=<MseLossBackward0>)\n",
      "tensor(6837063.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(6822722.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(6808413., grad_fn=<MseLossBackward0>)\n",
      "tensor(6794143.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(6779951.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(6765783., grad_fn=<MseLossBackward0>)\n",
      "tensor(6751639.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(6737568.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(6723540., grad_fn=<MseLossBackward0>)\n",
      "tensor(6709542.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(6695571., grad_fn=<MseLossBackward0>)\n",
      "tensor(6733900., grad_fn=<MseLossBackward0>)\n",
      "tensor(6667840., grad_fn=<MseLossBackward0>)\n",
      "tensor(6654014., grad_fn=<MseLossBackward0>)\n",
      "tensor(6640226., grad_fn=<MseLossBackward0>)\n",
      "tensor(6679524.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(6612834.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(6599168.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(6585583.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(6572039.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(6558518., grad_fn=<MseLossBackward0>)\n",
      "tensor(6545019.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(6531619., grad_fn=<MseLossBackward0>)\n",
      "tensor(6518242.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(6504887.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(6491575.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(6478340.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(6465129.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(6451938.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(6438806.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(6425736.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(6412686.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(6399659.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(6386723., grad_fn=<MseLossBackward0>)\n",
      "tensor(6468309., grad_fn=<MseLossBackward0>)\n",
      "tensor(6360923., grad_fn=<MseLossBackward0>)\n",
      "tensor(6348057.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(6335286., grad_fn=<MseLossBackward0>)\n",
      "tensor(6322537., grad_fn=<MseLossBackward0>)\n",
      "tensor(6309823.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(6297250., grad_fn=<MseLossBackward0>)\n",
      "tensor(6284528., grad_fn=<MseLossBackward0>)\n",
      "tensor(6369561.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(6319026., grad_fn=<MseLossBackward0>)\n",
      "tensor(6246884., grad_fn=<MseLossBackward0>)\n",
      "tensor(6234409., grad_fn=<MseLossBackward0>)\n",
      "tensor(6221974.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(6211249.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(6197222., grad_fn=<MseLossBackward0>)\n",
      "tensor(6184918.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(6233467., grad_fn=<MseLossBackward0>)\n",
      "tensor(6160398., grad_fn=<MseLossBackward0>)\n",
      "tensor(6148212.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(6136062., grad_fn=<MseLossBackward0>)\n",
      "tensor(6123920.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(6111809.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(6099767., grad_fn=<MseLossBackward0>)\n",
      "tensor(6087757.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(6075769.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(6063811., grad_fn=<MseLossBackward0>)\n",
      "tensor(6051924., grad_fn=<MseLossBackward0>)\n",
      "tensor(6133570., grad_fn=<MseLossBackward0>)\n",
      "tensor(6028222.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(6016398., grad_fn=<MseLossBackward0>)\n",
      "tensor(6004651.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(5992980., grad_fn=<MseLossBackward0>)\n",
      "tensor(5981213., grad_fn=<MseLossBackward0>)\n",
      "tensor(5969647.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(5957975., grad_fn=<MseLossBackward0>)\n",
      "tensor(5946384., grad_fn=<MseLossBackward0>)\n",
      "tensor(5934829., grad_fn=<MseLossBackward0>)\n",
      "tensor(5923287., grad_fn=<MseLossBackward0>)\n",
      "tensor(5911791.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(5900313.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(5888930., grad_fn=<MseLossBackward0>)\n",
      "tensor(5877581., grad_fn=<MseLossBackward0>)\n",
      "tensor(5866243., grad_fn=<MseLossBackward0>)\n",
      "tensor(5857035., grad_fn=<MseLossBackward0>)\n",
      "tensor(5919600.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(5832393.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(5823206., grad_fn=<MseLossBackward0>)\n",
      "tensor(5810041.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(5798882.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(5787813., grad_fn=<MseLossBackward0>)\n",
      "tensor(5778720., grad_fn=<MseLossBackward0>)\n",
      "tensor(5835190., grad_fn=<MseLossBackward0>)\n",
      "tensor(5754794., grad_fn=<MseLossBackward0>)\n",
      "tensor(5743782., grad_fn=<MseLossBackward0>)\n",
      "tensor(5799617.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(5721894.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(5711056.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(5702054., grad_fn=<MseLossBackward0>)\n",
      "tensor(5752850.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(5678753.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(5669686.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(5657241., grad_fn=<MseLossBackward0>)\n",
      "tensor(5648261., grad_fn=<MseLossBackward0>)\n",
      "tensor(5635937.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(5627003.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(5614877., grad_fn=<MseLossBackward0>)\n",
      "tensor(5661274., grad_fn=<MseLossBackward0>)\n",
      "tensor(5595405.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(5583376.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(5627579.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(5562476., grad_fn=<MseLossBackward0>)\n",
      "tensor(5605287., grad_fn=<MseLossBackward0>)\n",
      "tensor(5541751.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(5583224.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(5521202., grad_fn=<MseLossBackward0>)\n",
      "tensor(5511046., grad_fn=<MseLossBackward0>)\n",
      "tensor(5500731.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(5491921.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(5481732.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(5470251., grad_fn=<MseLossBackward0>)\n",
      "tensor(5460260., grad_fn=<MseLossBackward0>)\n",
      "tensor(5450145.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(5440242.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(5430184.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(5420261., grad_fn=<MseLossBackward0>)\n",
      "tensor(5410317.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(5401540., grad_fn=<MseLossBackward0>)\n",
      "tensor(5390455.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(5380587.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(5370755., grad_fn=<MseLossBackward0>)\n",
      "tensor(5360966., grad_fn=<MseLossBackward0>)\n",
      "tensor(5352318.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(5341548., grad_fn=<MseLossBackward0>)\n",
      "tensor(5331841., grad_fn=<MseLossBackward0>)\n",
      "tensor(5322215.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(5312885., grad_fn=<MseLossBackward0>)\n",
      "tensor(5340109., grad_fn=<MseLossBackward0>)\n",
      "tensor(5329757.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(5283802., grad_fn=<MseLossBackward0>)\n",
      "tensor(5309846., grad_fn=<MseLossBackward0>)\n",
      "tensor(5265780., grad_fn=<MseLossBackward0>)\n",
      "tensor(5256317.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(5279705.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(5236611., grad_fn=<MseLossBackward0>)\n",
      "tensor(5227205., grad_fn=<MseLossBackward0>)\n",
      "tensor(5249965.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(5208492., grad_fn=<MseLossBackward0>)\n",
      "tensor(5230382., grad_fn=<MseLossBackward0>)\n",
      "tensor(5189897., grad_fn=<MseLossBackward0>)\n",
      "tensor(5211129.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(5171374., grad_fn=<MseLossBackward0>)\n",
      "tensor(5192011., grad_fn=<MseLossBackward0>)\n",
      "tensor(5152981., grad_fn=<MseLossBackward0>)\n",
      "tensor(5171827., grad_fn=<MseLossBackward0>)\n",
      "tensor(5163189., grad_fn=<MseLossBackward0>)\n",
      "tensor(5125692., grad_fn=<MseLossBackward0>)\n",
      "tensor(5117999.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(5108316.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(5098717.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(5115049.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(5080870., grad_fn=<MseLossBackward0>)\n",
      "tensor(5071948., grad_fn=<MseLossBackward0>)\n",
      "tensor(5063616.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(5054741., grad_fn=<MseLossBackward0>)\n",
      "tensor(5045410., grad_fn=<MseLossBackward0>)\n",
      "tensor(5037686.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(5028398.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(5041153.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(5010959.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(5002032.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(5014111.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4984807., grad_fn=<MseLossBackward0>)\n",
      "tensor(4976731., grad_fn=<MseLossBackward0>)\n",
      "tensor(4987348., grad_fn=<MseLossBackward0>)\n",
      "tensor(4958653., grad_fn=<MseLossBackward0>)\n",
      "tensor(4951759.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4960844., grad_fn=<MseLossBackward0>)\n",
      "tensor(4932730.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4927195.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4934767.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4907062.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4902816.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4908833.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4881489., grad_fn=<MseLossBackward0>)\n",
      "tensor(4873360., grad_fn=<MseLossBackward0>)\n",
      "tensor(4869855., grad_fn=<MseLossBackward0>)\n",
      "tensor(4861260., grad_fn=<MseLossBackward0>)\n",
      "tensor(4848490., grad_fn=<MseLossBackward0>)\n",
      "tensor(4840314.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4832217.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4837252., grad_fn=<MseLossBackward0>)\n",
      "tensor(4828882., grad_fn=<MseLossBackward0>)\n",
      "tensor(4820531., grad_fn=<MseLossBackward0>)\n",
      "tensor(4812202.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4803869., grad_fn=<MseLossBackward0>)\n",
      "tensor(4783863., grad_fn=<MseLossBackward0>)\n",
      "tensor(4775854., grad_fn=<MseLossBackward0>)\n",
      "tensor(4767922.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4760058., grad_fn=<MseLossBackward0>)\n",
      "tensor(4752271.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4744512.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4736777., grad_fn=<MseLossBackward0>)\n",
      "tensor(4729059., grad_fn=<MseLossBackward0>)\n",
      "tensor(4721355., grad_fn=<MseLossBackward0>)\n",
      "tensor(4713662.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4705981.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4698309., grad_fn=<MseLossBackward0>)\n",
      "tensor(4690656., grad_fn=<MseLossBackward0>)\n",
      "tensor(4683053., grad_fn=<MseLossBackward0>)\n",
      "tensor(4675456.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4667867.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4660285.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4652710., grad_fn=<MseLossBackward0>)\n",
      "tensor(4645144.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4637634.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4630131., grad_fn=<MseLossBackward0>)\n",
      "tensor(4622634., grad_fn=<MseLossBackward0>)\n",
      "tensor(4615149., grad_fn=<MseLossBackward0>)\n",
      "tensor(4607717., grad_fn=<MseLossBackward0>)\n",
      "tensor(4600290., grad_fn=<MseLossBackward0>)\n",
      "tensor(4592871., grad_fn=<MseLossBackward0>)\n",
      "tensor(4585456.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4578050., grad_fn=<MseLossBackward0>)\n",
      "tensor(4570647.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4563253., grad_fn=<MseLossBackward0>)\n",
      "tensor(4555862.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4548480.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4541103.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4533784.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4526472., grad_fn=<MseLossBackward0>)\n",
      "tensor(4519197.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4511948., grad_fn=<MseLossBackward0>)\n",
      "tensor(4504704.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4497467., grad_fn=<MseLossBackward0>)\n",
      "tensor(4490236., grad_fn=<MseLossBackward0>)\n",
      "tensor(4483011., grad_fn=<MseLossBackward0>)\n",
      "tensor(4475791.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4468578., grad_fn=<MseLossBackward0>)\n",
      "tensor(4461411., grad_fn=<MseLossBackward0>)\n",
      "tensor(4454261.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4447117., grad_fn=<MseLossBackward0>)\n",
      "tensor(4439977.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4432845., grad_fn=<MseLossBackward0>)\n",
      "tensor(4425718.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4418598., grad_fn=<MseLossBackward0>)\n",
      "tensor(4411481.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4404373., grad_fn=<MseLossBackward0>)\n",
      "tensor(4397306., grad_fn=<MseLossBackward0>)\n",
      "tensor(4390286., grad_fn=<MseLossBackward0>)\n",
      "tensor(4383296.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4376312.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4369334., grad_fn=<MseLossBackward0>)\n",
      "tensor(4362359.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4355392.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4348431.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4336909.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4329924., grad_fn=<MseLossBackward0>)\n",
      "tensor(4323000.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4316104.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4309222.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4302350., grad_fn=<MseLossBackward0>)\n",
      "tensor(4295485., grad_fn=<MseLossBackward0>)\n",
      "tensor(4288625., grad_fn=<MseLossBackward0>)\n",
      "tensor(4281772., grad_fn=<MseLossBackward0>)\n",
      "tensor(4274923., grad_fn=<MseLossBackward0>)\n",
      "tensor(4268087.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4261350.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4254620.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4247894., grad_fn=<MseLossBackward0>)\n",
      "tensor(4241174., grad_fn=<MseLossBackward0>)\n",
      "tensor(4234458.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4227750., grad_fn=<MseLossBackward0>)\n",
      "tensor(4221045., grad_fn=<MseLossBackward0>)\n",
      "tensor(4214346., grad_fn=<MseLossBackward0>)\n",
      "tensor(4207652., grad_fn=<MseLossBackward0>)\n",
      "tensor(4200965., grad_fn=<MseLossBackward0>)\n",
      "tensor(4194281.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4187604.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4180931.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(4174266., grad_fn=<MseLossBackward0>)\n",
      "tensor(4167603.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4160948.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4154297.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4147651.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(4141051., grad_fn=<MseLossBackward0>)\n",
      "tensor(4134515.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(4127985.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(4121459.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4114940.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(4108425., grad_fn=<MseLossBackward0>)\n",
      "tensor(4101915., grad_fn=<MseLossBackward0>)\n",
      "tensor(4095410.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(4088910.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4082416.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(4075928.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(4069443.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(4062965.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(4056492.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(4050023.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(4043560.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(4037103.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(4030650., grad_fn=<MseLossBackward0>)\n",
      "tensor(4024203., grad_fn=<MseLossBackward0>)\n",
      "tensor(4017806., grad_fn=<MseLossBackward0>)\n",
      "tensor(4011465.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(4005131.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3998801.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3992477.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3986157.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3979843.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3973533.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3967230.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3960930.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3954636.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3948347., grad_fn=<MseLossBackward0>)\n",
      "tensor(3942063.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3935783.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3929509.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3923240., grad_fn=<MseLossBackward0>)\n",
      "tensor(3916977.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3910717.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3904464., grad_fn=<MseLossBackward0>)\n",
      "tensor(3898236.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3892089., grad_fn=<MseLossBackward0>)\n",
      "tensor(3885945.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3879808., grad_fn=<MseLossBackward0>)\n",
      "tensor(3873674.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3867546.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3861422.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3855304., grad_fn=<MseLossBackward0>)\n",
      "tensor(3849190.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3843081.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3836978., grad_fn=<MseLossBackward0>)\n",
      "tensor(3830878., grad_fn=<MseLossBackward0>)\n",
      "tensor(3824784.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3818695., grad_fn=<MseLossBackward0>)\n",
      "tensor(3812610.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3806531., grad_fn=<MseLossBackward0>)\n",
      "tensor(3800456.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3794386.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3788321.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3782261.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3776272.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3770316.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3764365.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3758418.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3752478., grad_fn=<MseLossBackward0>)\n",
      "tensor(3746539.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3740608.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3734680.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3728758.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3722839.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3716928., grad_fn=<MseLossBackward0>)\n",
      "tensor(3711018.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3705115.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3699215.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3693322.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3687432., grad_fn=<MseLossBackward0>)\n",
      "tensor(3681547.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3675667.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3669792., grad_fn=<MseLossBackward0>)\n",
      "tensor(3663921., grad_fn=<MseLossBackward0>)\n",
      "tensor(3658135., grad_fn=<MseLossBackward0>)\n",
      "tensor(3652367., grad_fn=<MseLossBackward0>)\n",
      "tensor(3646603., grad_fn=<MseLossBackward0>)\n",
      "tensor(3640843.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3635090., grad_fn=<MseLossBackward0>)\n",
      "tensor(3629339.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3623594.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3617853.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3612117., grad_fn=<MseLossBackward0>)\n",
      "tensor(3606386., grad_fn=<MseLossBackward0>)\n",
      "tensor(3600658.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3594936.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3589218.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3583505.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3577797., grad_fn=<MseLossBackward0>)\n",
      "tensor(3572092.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3566393., grad_fn=<MseLossBackward0>)\n",
      "tensor(3560698.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3555008., grad_fn=<MseLossBackward0>)\n",
      "tensor(3549322.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3543704.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3538119., grad_fn=<MseLossBackward0>)\n",
      "tensor(3532538.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3526962.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3521390., grad_fn=<MseLossBackward0>)\n",
      "tensor(3515823.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3510259.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3504701.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3499147.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3493598., grad_fn=<MseLossBackward0>)\n",
      "tensor(3488052.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3482512., grad_fn=<MseLossBackward0>)\n",
      "tensor(3476975.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3471443.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3465916.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3460393., grad_fn=<MseLossBackward0>)\n",
      "tensor(3454875., grad_fn=<MseLossBackward0>)\n",
      "tensor(3449360.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3443851.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3438346., grad_fn=<MseLossBackward0>)\n",
      "tensor(3432862.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3427455.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3422054., grad_fn=<MseLossBackward0>)\n",
      "tensor(3416656.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3411262.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3405873.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3400489., grad_fn=<MseLossBackward0>)\n",
      "tensor(3395108.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3389731.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3384359.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3378992., grad_fn=<MseLossBackward0>)\n",
      "tensor(3373628.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3368269.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3362915., grad_fn=<MseLossBackward0>)\n",
      "tensor(3357564.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3352218., grad_fn=<MseLossBackward0>)\n",
      "tensor(3346876.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3341538.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3336205., grad_fn=<MseLossBackward0>)\n",
      "tensor(3330875.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3325550.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3320263.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3315035., grad_fn=<MseLossBackward0>)\n",
      "tensor(3309812.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3304592., grad_fn=<MseLossBackward0>)\n",
      "tensor(3299377.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3294165.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3288959.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3283755.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3278558., grad_fn=<MseLossBackward0>)\n",
      "tensor(3273363., grad_fn=<MseLossBackward0>)\n",
      "tensor(3268173., grad_fn=<MseLossBackward0>)\n",
      "tensor(3262986.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3257805., grad_fn=<MseLossBackward0>)\n",
      "tensor(3252626.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3247453.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3242283.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3237118.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3231956.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3226800.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3221646., grad_fn=<MseLossBackward0>)\n",
      "tensor(3216498., grad_fn=<MseLossBackward0>)\n",
      "tensor(3211368.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3206315., grad_fn=<MseLossBackward0>)\n",
      "tensor(3201265.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3196219.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3191178.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3186141., grad_fn=<MseLossBackward0>)\n",
      "tensor(3181107.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3176078., grad_fn=<MseLossBackward0>)\n",
      "tensor(3171053.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3166031.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3161014., grad_fn=<MseLossBackward0>)\n",
      "tensor(3156000.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3150991.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3145986.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3140985., grad_fn=<MseLossBackward0>)\n",
      "tensor(3135987.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3130994.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3126005., grad_fn=<MseLossBackward0>)\n",
      "tensor(3121020.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3116038.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3111061.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3106088.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3101172.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3096291.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3091417., grad_fn=<MseLossBackward0>)\n",
      "tensor(3086544.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3081676.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3076812.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3071952.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3067095.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3062243.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3057394.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3052550., grad_fn=<MseLossBackward0>)\n",
      "tensor(3047708.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3042872., grad_fn=<MseLossBackward0>)\n",
      "tensor(3038038., grad_fn=<MseLossBackward0>)\n",
      "tensor(3033209.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3028383.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3023562.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3018744., grad_fn=<MseLossBackward0>)\n",
      "tensor(3013947.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3015730.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3004907.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2999692.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2994884.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2991020.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2985450., grad_fn=<MseLossBackward0>)\n",
      "tensor(2987080.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2976306.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2971237., grad_fn=<MseLossBackward0>)\n",
      "tensor(2969270., grad_fn=<MseLossBackward0>)\n",
      "tensor(2961974.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2957106.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2953442., grad_fn=<MseLossBackward0>)\n",
      "tensor(2947789.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2948939.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2938754., grad_fn=<MseLossBackward0>)\n",
      "tensor(2933764.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2932591.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2924708.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2919829., grad_fn=<MseLossBackward0>)\n",
      "tensor(2917758.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2910724.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2905972.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2903244.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2896940.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2892187.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2889647.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2883165.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2878449., grad_fn=<MseLossBackward0>)\n",
      "tensor(2875823.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2869466., grad_fn=<MseLossBackward0>)\n",
      "tensor(2864772.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2861797.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2855811.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2851173.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2848539.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2842369.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2837659.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2837983.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2829294., grad_fn=<MseLossBackward0>)\n",
      "tensor(2824240.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2819700.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2817423.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2811124.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2806357.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2809093.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2798685., grad_fn=<MseLossBackward0>)\n",
      "tensor(2793190.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2788615., grad_fn=<MseLossBackward0>)\n",
      "tensor(2790451.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2780909.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2775543.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2770975.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2773425., grad_fn=<MseLossBackward0>)\n",
      "tensor(2763488., grad_fn=<MseLossBackward0>)\n",
      "tensor(2757997.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2753479., grad_fn=<MseLossBackward0>)\n",
      "tensor(2749073.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2748268.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2740477.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2736143.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2731744.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2727408., grad_fn=<MseLossBackward0>)\n",
      "tensor(2723077., grad_fn=<MseLossBackward0>)\n",
      "tensor(2718885.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2714540.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2710515., grad_fn=<MseLossBackward0>)\n",
      "tensor(2707651.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2703048.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2697450.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2693147.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2688889., grad_fn=<MseLossBackward0>)\n",
      "tensor(2684667.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2680448.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2676232.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2672020., grad_fn=<MseLossBackward0>)\n",
      "tensor(2667811.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2663605.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2659403.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2655204.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2651009.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2646817., grad_fn=<MseLossBackward0>)\n",
      "tensor(2642628.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2638443., grad_fn=<MseLossBackward0>)\n",
      "tensor(2634260.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2630082., grad_fn=<MseLossBackward0>)\n",
      "tensor(2625906.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2621734.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2617565.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2613400.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2609238.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2605079.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2600924.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2596772.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2592647.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2588580.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2584516.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2580455.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2576398.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2572477.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2566554.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2560018.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2554123.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2564820., grad_fn=<MseLossBackward0>)\n",
      "tensor(4916422.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2548954.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(3297634.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2552237., grad_fn=<MseLossBackward0>)\n",
      "tensor(3687934.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2730052.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2528443.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2523149., grad_fn=<MseLossBackward0>)\n",
      "tensor(2518376.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2513912.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2509631.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2505462., grad_fn=<MseLossBackward0>)\n",
      "tensor(2501359., grad_fn=<MseLossBackward0>)\n",
      "tensor(2497298., grad_fn=<MseLossBackward0>)\n",
      "tensor(2493263.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2489245.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2485239.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2481242., grad_fn=<MseLossBackward0>)\n",
      "tensor(2477250.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2473264.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2469282., grad_fn=<MseLossBackward0>)\n",
      "tensor(2465303.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2461329., grad_fn=<MseLossBackward0>)\n",
      "tensor(2457357.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2453389.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2449424.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2445463.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2441505.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2437550.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2433680.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2429884.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2426090.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2422299.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2418511.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2414727., grad_fn=<MseLossBackward0>)\n",
      "tensor(2410945.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2407166.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2403390.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2399617.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2395847.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2392080.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2388316.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2384555.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2380797.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2377043., grad_fn=<MseLossBackward0>)\n",
      "tensor(2373290.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2369541.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2365795.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2362052.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2358312.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2354575.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2350841., grad_fn=<MseLossBackward0>)\n",
      "tensor(2347109.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2343381.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2339656.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2335934., grad_fn=<MseLossBackward0>)\n",
      "tensor(2332215., grad_fn=<MseLossBackward0>)\n",
      "tensor(2328498.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2324785.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2321075.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2317367.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2313663.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2309962., grad_fn=<MseLossBackward0>)\n",
      "tensor(2306263.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2302568.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2298875.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2295186.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2291500., grad_fn=<MseLossBackward0>)\n",
      "tensor(2287816.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2284136., grad_fn=<MseLossBackward0>)\n",
      "tensor(2280458.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2276783.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2273112.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2269443.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2265778., grad_fn=<MseLossBackward0>)\n",
      "tensor(2262115.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2258455.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2254799.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2251145.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2247574.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2244072.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2240573.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2237077., grad_fn=<MseLossBackward0>)\n",
      "tensor(2233583.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2230092.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2226604.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2223118.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2219636.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2216156.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2212678.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2209204.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2205732.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2202263.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2198797.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2195334., grad_fn=<MseLossBackward0>)\n",
      "tensor(2191873.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2188415., grad_fn=<MseLossBackward0>)\n",
      "tensor(2184960., grad_fn=<MseLossBackward0>)\n",
      "tensor(2181507.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2178057.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2174610.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2171166.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2167724.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2164286., grad_fn=<MseLossBackward0>)\n",
      "tensor(2160850., grad_fn=<MseLossBackward0>)\n",
      "tensor(2157417., grad_fn=<MseLossBackward0>)\n",
      "tensor(2153986.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2150558.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2147133.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2143711.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2140291.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2136875., grad_fn=<MseLossBackward0>)\n",
      "tensor(2133461., grad_fn=<MseLossBackward0>)\n",
      "tensor(2130049.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2126640.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2123235.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2119832.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2116431.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2113034.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2109639.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2106247.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2102858., grad_fn=<MseLossBackward0>)\n",
      "tensor(2099471.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2096087.6250, grad_fn=<MseLossBackward0>)\n",
      "tensor(2092706.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2089328., grad_fn=<MseLossBackward0>)\n",
      "tensor(2085952.6250, grad_fn=<MseLossBackward0>)\n",
      "tensor(2082579.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2079209.6250, grad_fn=<MseLossBackward0>)\n",
      "tensor(2075842.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2072477.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2069181.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2065962.1250, grad_fn=<MseLossBackward0>)\n",
      "tensor(2062745.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2059530.8750, grad_fn=<MseLossBackward0>)\n",
      "tensor(2056319.3750, grad_fn=<MseLossBackward0>)\n",
      "tensor(2053110.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2049903.6250, grad_fn=<MseLossBackward0>)\n",
      "tensor(2046699.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2043497.8750, grad_fn=<MseLossBackward0>)\n",
      "tensor(2040298.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2037102.1250, grad_fn=<MseLossBackward0>)\n",
      "tensor(2033908.1250, grad_fn=<MseLossBackward0>)\n",
      "tensor(2030716.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2027527.6250, grad_fn=<MseLossBackward0>)\n",
      "tensor(2024341.1250, grad_fn=<MseLossBackward0>)\n",
      "tensor(2021157.1250, grad_fn=<MseLossBackward0>)\n",
      "tensor(2017975.6250, grad_fn=<MseLossBackward0>)\n",
      "tensor(2014796.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2011620.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(2008446.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2005275.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(2002106.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(1998940.1250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1995776.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(1992615., grad_fn=<MseLossBackward0>)\n",
      "tensor(1989456.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(1986300.1250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1983146.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(1979995.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(1976846.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1973700.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1970557.1250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1967416.1250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1964277.6250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1961141.6250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1958008., grad_fn=<MseLossBackward0>)\n",
      "tensor(1954877.1250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1951748.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(1948622.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1945499.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1942378.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1939260., grad_fn=<MseLossBackward0>)\n",
      "tensor(1936144., grad_fn=<MseLossBackward0>)\n",
      "tensor(1933030.8750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1929920., grad_fn=<MseLossBackward0>)\n",
      "tensor(1926811.8750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1923705.8750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1920602.8750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1917502.1250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1914403.8750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1911308.1250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1908215., grad_fn=<MseLossBackward0>)\n",
      "tensor(1905124.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(1902036.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(1898966.3750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1896017.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1893070.3750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1890126.1250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1887184., grad_fn=<MseLossBackward0>)\n",
      "tensor(1884244.1250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1881306.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1878371.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(1875438.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(1872508., grad_fn=<MseLossBackward0>)\n",
      "tensor(1869579.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(1866653.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(1863729.8750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1860808.6250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1857889.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(1854972.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1852058.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1849146.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1846236.1250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1843328.6250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1840423.6250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1837520.6250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1834620.1250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1831721.6250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1828825.6250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1825932.1250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1823040.6250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1820151.6250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1817264.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1814380.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(1811498.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1808618.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(1805741.1250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1802865.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1799993., grad_fn=<MseLossBackward0>)\n",
      "tensor(1797122.3750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1794254.1250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1791388., grad_fn=<MseLossBackward0>)\n",
      "tensor(1788524.1250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1785662.8750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1782803.8750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1779947.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1777092.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1774240.6250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1771390.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1768542.8750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1765697.8750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1762855., grad_fn=<MseLossBackward0>)\n",
      "tensor(1760014.3750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1757176.3750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1754340., grad_fn=<MseLossBackward0>)\n",
      "tensor(1751506.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(1748675.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1745845.8750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1743019.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(1740194.8750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1737372.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1734590.8750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1731901.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(1729214.1250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1726528.6250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1723845.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1721164.1250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1718485.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(1715808.3750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1713133.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(1710460.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1707790.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1705121.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(1702455.3750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1699791.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1697129., grad_fn=<MseLossBackward0>)\n",
      "tensor(1694468.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1771891.6250, grad_fn=<MseLossBackward0>)\n",
      "tensor(3355284.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1722158.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1719441.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1701996.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(1691475.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1684873., grad_fn=<MseLossBackward0>)\n",
      "tensor(1680211.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(1676529.8750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1673350.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1670430.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1667646.1250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1664933.6250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1662259.3750, grad_fn=<MseLossBackward0>)\n",
      "tensor(2147857.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3636594.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(3436794., grad_fn=<MseLossBackward0>)\n",
      "tensor(1778218.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(1775588.6250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1772961.8750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1770337., grad_fn=<MseLossBackward0>)\n",
      "tensor(1767714.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(1765093.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1762475.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(1759859.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1757244.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1754632.6250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1752022.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1749414.8750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1746809., grad_fn=<MseLossBackward0>)\n",
      "tensor(1744205.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1741603.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(1739004.1250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1736406.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1733811.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(1731218.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1728627.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1726038.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1723451.3750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1720866.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(1718283.8750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1715703., grad_fn=<MseLossBackward0>)\n",
      "tensor(1713124.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1710548.1250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1707974.1250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1705401.8750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1702831.8750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1700263.6250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1697765.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1695324.1250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1692884.1250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1690446.1250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1688010.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1685576.1250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1683143.6250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1680713.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(1678285.1250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1675858.3750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1673433.8750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1671011., grad_fn=<MseLossBackward0>)\n",
      "tensor(1668590.3750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1666171.3750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1663754.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(1661339.3750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1658926.3750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1656515., grad_fn=<MseLossBackward0>)\n",
      "tensor(1654105.6250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1651698.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1649292.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(1646889., grad_fn=<MseLossBackward0>)\n",
      "tensor(1644487.3750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1642087.3750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1639689.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(1637293.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(1634899.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(1632507.3750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1630117.1250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1627728.6250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1625342.1250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1622957.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(1620575., grad_fn=<MseLossBackward0>)\n",
      "tensor(1618194.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1615815.3750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1613438.3750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1611063.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(1608690.3750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1606319., grad_fn=<MseLossBackward0>)\n",
      "tensor(1603949.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1601582.3750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1599217., grad_fn=<MseLossBackward0>)\n",
      "tensor(1596853.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(1594491.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(1592131.8750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1589774.1250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1587418.1250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1585064.1250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1582712., grad_fn=<MseLossBackward0>)\n",
      "tensor(1580361.6250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1578013.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(1575666.8750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1573322.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(1570979.8750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1568639.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1566300.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(1563963.3750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1561628.6250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1559295.3750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1556964.3750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1554635.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1552307.6250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1549988.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1547781.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(1545575.6250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1543371.8750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1541169.6250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1538969., grad_fn=<MseLossBackward0>)\n",
      "tensor(1536770.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1534573.2500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1532377.8750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1530184.1250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1527992.3750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1525801.8750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1523613.7500, grad_fn=<MseLossBackward0>)\n",
      "tensor(1521426.8750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1519241.8750, grad_fn=<MseLossBackward0>)\n",
      "tensor(1517058.5000, grad_fn=<MseLossBackward0>)\n",
      "tensor(1514877.1250, grad_fn=<MseLossBackward0>)\n",
      "tensor(1512697., grad_fn=<MseLossBackward0>)\n",
      "\n",
      "The output of the NN (post tuning) is:\n",
      " tensor([[   0.0000],\n",
      "        [   0.0000],\n",
      "        [   0.0000],\n",
      "        [2980.9641],\n",
      "        [   0.0000],\n",
      "        [   0.0000],\n",
      "        [2980.9641],\n",
      "        [   0.0000],\n",
      "        [   0.0000],\n",
      "        [   0.0000],\n",
      "        [5169.4839],\n",
      "        [   0.0000],\n",
      "        [   0.0000],\n",
      "        [5169.4839],\n",
      "        [   0.0000],\n",
      "        [   0.0000],\n",
      "        [5169.4839],\n",
      "        [   0.0000],\n",
      "        [   0.0000],\n",
      "        [   0.0000],\n",
      "        [   0.0000],\n",
      "        [   0.0000],\n",
      "        [2980.9641],\n",
      "        [   0.0000],\n",
      "        [   0.0000],\n",
      "        [   0.0000],\n",
      "        [   0.0000],\n",
      "        [   0.0000],\n",
      "        [   0.0000],\n",
      "        [   0.0000],\n",
      "        [   0.0000],\n",
      "        [   0.0000],\n",
      "        [   0.0000],\n",
      "        [   0.0000],\n",
      "        [   0.0000],\n",
      "        [   0.0000],\n",
      "        [5169.4839],\n",
      "        [   0.0000],\n",
      "        [   0.0000],\n",
      "        [5169.4839],\n",
      "        [   0.0000],\n",
      "        [   0.0000],\n",
      "        [   0.0000],\n",
      "        [5169.4839],\n",
      "        [   0.0000],\n",
      "        [2980.9641],\n",
      "        [   0.0000],\n",
      "        [   0.0000],\n",
      "        [   0.0000],\n",
      "        [2980.9641],\n",
      "        [   0.0000],\n",
      "        [   0.0000],\n",
      "        [   0.0000],\n",
      "        [   0.0000],\n",
      "        [   0.0000],\n",
      "        [   0.0000],\n",
      "        [5169.4839],\n",
      "        [   0.0000],\n",
      "        [   0.0000],\n",
      "        [5169.4839],\n",
      "        [   0.0000],\n",
      "        [5169.4839],\n",
      "        [5169.4839],\n",
      "        [   0.0000],\n",
      "        [5169.4839],\n",
      "        [2980.9641],\n",
      "        [   0.0000],\n",
      "        [   0.0000],\n",
      "        [   0.0000],\n",
      "        [   0.0000],\n",
      "        [2980.9641],\n",
      "        [2980.9641],\n",
      "        [2980.9641],\n",
      "        [2980.9641],\n",
      "        [   0.0000],\n",
      "        [   0.0000],\n",
      "        [   0.0000],\n",
      "        [   0.0000],\n",
      "        [5169.4839],\n",
      "        [   0.0000],\n",
      "        [   0.0000],\n",
      "        [   0.0000],\n",
      "        [   0.0000],\n",
      "        [2980.9641],\n",
      "        [   0.0000],\n",
      "        [   0.0000],\n",
      "        [2980.9641],\n",
      "        [5169.4839],\n",
      "        [   0.0000],\n",
      "        [5169.4839],\n",
      "        [   0.0000],\n",
      "        [   0.0000],\n",
      "        [5169.4839],\n",
      "        [   0.0000],\n",
      "        [   0.0000],\n",
      "        [   0.0000],\n",
      "        [   0.0000],\n",
      "        [5169.4839],\n",
      "        [2980.9641],\n",
      "        [   0.0000]]) \n",
      " The target output (from measurements) is:\n",
      " tensor([[2.0086e+01],\n",
      "        [7.3891e+00],\n",
      "        [4.0343e+02],\n",
      "        [2.9810e+03],\n",
      "        [7.3891e+00],\n",
      "        [7.3891e+00],\n",
      "        [2.9810e+03],\n",
      "        [7.3891e+00],\n",
      "        [1.0000e+00],\n",
      "        [5.4598e+01],\n",
      "        [8.1031e+03],\n",
      "        [7.3891e+00],\n",
      "        [2.7183e+00],\n",
      "        [8.1031e+03],\n",
      "        [7.3891e+00],\n",
      "        [7.3891e+00],\n",
      "        [8.1031e+03],\n",
      "        [5.4598e+01],\n",
      "        [5.4598e+01],\n",
      "        [1.0966e+03],\n",
      "        [7.3891e+00],\n",
      "        [1.4841e+02],\n",
      "        [2.9810e+03],\n",
      "        [4.0343e+02],\n",
      "        [4.0343e+02],\n",
      "        [1.0966e+03],\n",
      "        [2.7183e+00],\n",
      "        [1.4841e+02],\n",
      "        [7.3891e+00],\n",
      "        [2.7183e+00],\n",
      "        [1.0966e+03],\n",
      "        [5.4598e+01],\n",
      "        [2.0086e+01],\n",
      "        [1.0000e+00],\n",
      "        [1.0966e+03],\n",
      "        [4.0343e+02],\n",
      "        [8.1031e+03],\n",
      "        [2.0086e+01],\n",
      "        [2.0086e+01],\n",
      "        [8.1031e+03],\n",
      "        [1.0000e+00],\n",
      "        [2.7183e+00],\n",
      "        [7.3891e+00],\n",
      "        [8.1031e+03],\n",
      "        [1.0966e+03],\n",
      "        [2.9810e+03],\n",
      "        [4.0343e+02],\n",
      "        [2.0086e+01],\n",
      "        [5.4598e+01],\n",
      "        [2.9810e+03],\n",
      "        [1.4841e+02],\n",
      "        [2.7183e+00],\n",
      "        [1.4841e+02],\n",
      "        [4.0343e+02],\n",
      "        [5.4598e+01],\n",
      "        [7.3891e+00],\n",
      "        [8.1031e+03],\n",
      "        [2.0086e+01],\n",
      "        [1.4841e+02],\n",
      "        [8.1031e+03],\n",
      "        [1.0966e+03],\n",
      "        [8.1031e+03],\n",
      "        [8.1031e+03],\n",
      "        [5.4598e+01],\n",
      "        [8.1031e+03],\n",
      "        [2.9810e+03],\n",
      "        [1.0966e+03],\n",
      "        [5.4598e+01],\n",
      "        [1.4841e+02],\n",
      "        [7.3891e+00],\n",
      "        [2.9810e+03],\n",
      "        [2.9810e+03],\n",
      "        [2.9810e+03],\n",
      "        [2.9810e+03],\n",
      "        [5.4598e+01],\n",
      "        [5.4598e+01],\n",
      "        [7.3891e+00],\n",
      "        [2.0086e+01],\n",
      "        [8.1031e+03],\n",
      "        [2.7183e+00],\n",
      "        [7.3891e+00],\n",
      "        [1.0966e+03],\n",
      "        [7.3891e+00],\n",
      "        [2.9810e+03],\n",
      "        [1.4841e+02],\n",
      "        [1.0966e+03],\n",
      "        [2.9810e+03],\n",
      "        [8.1031e+03],\n",
      "        [7.3891e+00],\n",
      "        [8.1031e+03],\n",
      "        [2.0086e+01],\n",
      "        [5.4598e+01],\n",
      "        [8.1031e+03],\n",
      "        [7.3891e+00],\n",
      "        [4.0343e+02],\n",
      "        [7.3891e+00],\n",
      "        [1.0966e+03],\n",
      "        [8.1031e+03],\n",
      "        [2.9810e+03],\n",
      "        [7.3891e+00]])\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "trainingNN(layer_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3f42d047-17f3-461c-98c0-794e9da1253a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
